const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(G),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(G),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":74,\"nextId\":74,\"documentIds\":{\"0\":\"v-22a39d25\",\"1\":\"v-22a39d25#联系我们\",\"2\":\"v-22a39d25#赞助\",\"3\":\"v-ba934fd8\",\"4\":\"v-ba934fd8#配置项总览\",\"5\":\"v-ba934fd8#默认配置\",\"6\":\"v-b455e1be\",\"7\":\"v-b455e1be#配置项总览\",\"8\":\"v-b455e1be#msg-processor-executor-group\",\"9\":\"v-b455e1be#thread-count\",\"10\":\"v-b455e1be#max-pending-tasks\",\"11\":\"v-b455e1be#pool-name\",\"12\":\"v-01b70ca6\",\"13\":\"v-01b70ca6#配置项总览\",\"14\":\"v-01b70ca6#max-frame-length\",\"15\":\"v-2a54b6e2\",\"16\":\"v-2a54b6e2#配置项总览\",\"17\":\"v-2a54b6e2#port\",\"18\":\"v-2a54b6e2#boss-thread-count\",\"19\":\"v-2a54b6e2#worker-thread-count\",\"20\":\"v-2a54b6e2#idle-state-handler\",\"21\":\"v-7f7106d4\",\"22\":\"v-7f7106d4#request-sub-package-storage\",\"23\":\"v-fffb8e28\",\"24\":\"v-fffb8e28#章节目录\",\"25\":\"v-d0ca080a\",\"26\":\"v-d0ca080a#参考资料\",\"27\":\"v-d0ca080a#主要角色\",\"28\":\"v-d0ca080a#通信流程-1\",\"29\":\"v-d0ca080a#实现方式\",\"30\":\"v-364bc319\",\"31\":\"v-364bc319#请先读我\",\"32\":\"v-7702eca6\",\"33\":\"v-2925e518\",\"34\":\"v-f7c5c20c\",\"35\":\"v-1724189e\",\"36\":\"v-cbf0d674\",\"37\":\"v-3f64f4f1\",\"38\":\"v-51ece62a\",\"39\":\"v-51ece62a#分包合并\",\"40\":\"v-51ece62a#相关配置\",\"41\":\"v-d7bba24e\",\"42\":\"v-7c488670\",\"43\":\"v-7c488670#创建工程\",\"44\":\"v-7c488670#添加依赖\",\"45\":\"v-7c488670#spring-boot-2-x\",\"46\":\"v-7c488670#spring-boot-3-x\",\"47\":\"v-7c488670#配置\",\"48\":\"v-7c488670#注册你自己的订阅者\",\"49\":\"v-7c488670#伪代码\",\"50\":\"v-7c488670#http订阅示例\",\"51\":\"v-7c488670#websocket订阅示例\",\"52\":\"v-7c488670#测试\",\"53\":\"v-7c488670#启动项目\",\"54\":\"v-7c488670#http客户端订阅\",\"55\":\"v-7c488670#websocket客户端订阅\",\"56\":\"v-7c488670#发报文\",\"57\":\"v-fcea5a42\",\"58\":\"v-fcea5a42#jt1078request\",\"59\":\"v-fcea5a42#jt1078session\",\"60\":\"v-ab7da75e\",\"61\":\"v-0da2cdf8\",\"62\":\"v-0da2cdf8#jt808msgdecoder\",\"63\":\"v-097702b0\",\"64\":\"v-0e34b0c4\",\"65\":\"v-35e0229c\",\"66\":\"v-35e0229c#介绍\",\"67\":\"v-3e376b10\",\"68\":\"v-3e376b10#jt1078sessionmanager\",\"69\":\"v-3e376b10#jt1078sessioneventlistener\",\"70\":\"v-6512d51b\",\"71\":\"v-262629b8\",\"72\":\"v-37c5e284\",\"73\":\"v-1e734c1a\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,15],\"2\":[1,4],\"3\":[1],\"4\":[1,26],\"5\":[1,15],\"6\":[2,16],\"7\":[1,15],\"8\":[4],\"9\":[2,4],\"10\":[3,4],\"11\":[2,7],\"12\":[1,7],\"13\":[1,7],\"14\":[3,12],\"15\":[1,7],\"16\":[1,20],\"17\":[1,7],\"18\":[3,12],\"19\":[3,13],\"20\":[3,23],\"21\":[2,5],\"22\":[4,21],\"23\":[1],\"24\":[1],\"25\":[1],\"26\":[1,2],\"27\":[1,27],\"28\":[1,55],\"29\":[1,53],\"30\":[1],\"31\":[1,28],\"32\":[1],\"33\":[1,102],\"34\":[1,73],\"35\":[1,56],\"36\":[1,41],\"37\":[1,1],\"38\":[1],\"39\":[1,64],\"40\":[1,22],\"41\":[1],\"42\":[1,23],\"43\":[1,11],\"44\":[1],\"45\":[4,13],\"46\":[4,12],\"47\":[1,21],\"48\":[1,4],\"49\":[1,133],\"50\":[1,124],\"51\":[1,142],\"52\":[1],\"53\":[1,17],\"54\":[1,33],\"55\":[1,31],\"56\":[1,30],\"57\":[1],\"58\":[1,58],\"59\":[1,21],\"60\":[1],\"61\":[1],\"62\":[1,21],\"63\":[1],\"64\":[1,18],\"65\":[1],\"66\":[1,67],\"67\":[1],\"68\":[1,10],\"69\":[1,45],\"70\":[1,8],\"71\":[2,304],\"72\":[3],\"73\":[1]},\"averageFieldLength\":[1.3918918918918919,31.152405137451638],\"storedFields\":{\"0\":{\"h\":\"关于我们\"},\"1\":{\"h\":\"联系我们\",\"t\":[\"GitHub 提交 Issue(推荐) \",\"请尽可能地描述清楚自己的问题\",\"异常信息最好有完整的堆栈记录，以及使用的版本\",\"QQ交流群 : 1072477383\",\"上班时间，(本人)不会回复；有问题群里留言即可，会尽最大可能在非工作时间及时处理\",\"另外拜托群里的各位大佬能解答一下新人的疑问\"]},\"2\":{\"h\":\"赞助\",\"t\":[\"项目的发展离不开你的支持，请作者喝一杯🍺吧！\",\"有钱的捧个钱场 没钱的捧个人场\"]},\"3\":{\"h\":\"overview\"},\"4\":{\"h\":\"配置项总览\",\"t\":[\"jt1078: protocol: # ... server: # ... request-sub-package-combiner: # ... msg-processor: # ... logging: level: root: info io.github.hylexus.jt.jt1078.support.dispatcher.Jt1078RequestHandler: debug io.github.hylexus.jt.jt1078.support.netty.Jt1078DispatcherChannelHandler: debug io.github.hylexus.jt.jt1078.support.dispatcher.impl.DefaultJt1078RequestMsgDispatcher: debug \"]},\"5\":{\"h\":\"默认配置\",\"t\":[\"默认的配置可以在default-jt808-server-config.yml 中查看。 并且已经将默认的配置加入到了 Spring 的 PropertySources 中，并将其置于最后，名称为 default-jt808-server-config 。\"]},\"6\":{\"h\":\"message-processor\",\"t\":[\"提示\",\"该章节介绍的是 jt1078.msg-processor.executor-group.xxx 消息处理线程池相关的配置。\",\"参见 io.netty.util.concurrent.DefaultEventExecutorGroup 。\"]},\"7\":{\"h\":\"配置项总览\",\"t\":[\"jt1078: msg-processor: executor-group: pool-name: 1078-msg-processor thread-count: 128 max-pending-tasks: 128 \"]},\"8\":{\"h\":\"msg-processor.executor-group\"},\"9\":{\"h\":\"thread-count\",\"t\":[\"类型：int\",\"默认值：128\"]},\"10\":{\"h\":\"max-pending-tasks\",\"t\":[\"类型：int\",\"默认值：128\"]},\"11\":{\"h\":\"pool-name\",\"t\":[\"线程池的线程名前缀。\",\"类型：String\",\"默认值：1078-msg-processer\"]},\"12\":{\"h\":\"protocol\",\"t\":[\"提示\",\"该章节介绍的是 jt1078.protocol.xxx 相关的配置。\"]},\"13\":{\"h\":\"配置项总览\",\"t\":[\"jt1078: protocol: max-frame-length: 4096 \"]},\"14\":{\"h\":\"max-frame-length\",\"t\":[\"对应 io.netty.handler.codec.DelimiterBasedFrameDecoder 的 maxFrameLength 属性。默认值：4096。\"]},\"15\":{\"h\":\"server\",\"t\":[\"提示\",\"该章节介绍的是 jt1078.server.xxx 相关的配置。\"]},\"16\":{\"h\":\"配置项总览\",\"t\":[\"jt808: server: port: 61078 worker-thread-count: 0 boss-thread-count: 0 idle-state-handler: enabled: true reader-idle-time: 20m writer-idle-time: 0 all-idle-time: 0 \"]},\"17\":{\"h\":\"port\",\"t\":[\"类型：int\",\"默认值：61078\",\"Netty 服务器的TCP端口。\"]},\"18\":{\"h\":\"boss-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.bossGroup=new NioEventLoopGroup(bossThreadCount); \"]},\"19\":{\"h\":\"worker-thread-count\",\"t\":[\"类型：int\",\"默认值：0\",\"默认值 0 表示交由 Netty 处理。\",\"this.workerGroup =new NioEventLoopGroup(workThreadCount); \"]},\"20\":{\"h\":\"idle-state-handler\",\"t\":[\"该配置项对应 io.netty.handler.timeout.IdleStateHandler 的 三个属性：readerIdleTime、 writerIdleTime 、allIdelTime。\",\"如果你的项目不需要 IdleStateHandler 的话，将 jt1078.server.idle-state-handler.enabled 配置为 false 即可。\"]},\"21\":{\"h\":\"sub-package\",\"t\":[\"提示\",\"该章节介绍的是 分包消息 相关的配置。\"]},\"22\":{\"h\":\"request-sub-package-storage\",\"t\":[\"请求分包消息暂存器相关配置。\",\"jt808: request-sub-package-combiner: type: caffeine # 当且仅当 jt1078.request-sub-package-combiner.type = Caffeine 时候有效 caffeine: # 最多缓存多少条消息 maximum-size: 1024 # 最大缓存时间 ttl: 30s \"]},\"23\":{\"h\":\"指南\"},\"24\":{\"h\":\"章节目录\"},\"25\":{\"h\":\"通信流程\"},\"26\":{\"h\":\"参考资料\",\"t\":[\"JT/1078音视频传输协议开发指南\"]},\"27\":{\"h\":\"主要角色\",\"t\":[\"用户\",\"指令服务：指的是 JT/T 808 服务\",\"流媒体服务：指的是 JT/T 1078 服务\",\"终端设备：指的是车载终端\",\"订阅者：这里只是一个泛称 \",\"可以是音视频播放器、其他推流服务(比如 Nginx)、其他进程、文件、socket ……\",\"常用的就是 flv播放器 比如 VLC、flv.js、mpegts.js 等\"]},\"28\":{\"h\":\"通信流程\",\"t\":[\"1). 用户请求调阅某个终端的某个通道的流媒体数据\",\"2). 指令服务向终端设备发送 0x9101 指令, \",\"0x9101 指令中包含了 流媒体服务的 ip, port, 通道号 等信息\",\"3). 终端设备收到 0x9101 指令之后，开始向流媒体服务 ip:port 推送音视频码流\",\"4). 流媒体服务收到码流数据，做一些必要的转换，然后向订阅者发送(转换之后的)流媒体数据 \",\"转换的目的是为了满足订阅者的播放需求\",\"一般常见的终端视频格式都是 H.264，但是播放器一般都不能直接播放 H.264，所以要做进一步的转码(比如 H.264 -> FLV)\",\"相比于视频，音频格式就很多了，比如 G.711、G.726、ADPCM 等；设备上传的通常都是压缩之后的音频数据，也需要做相应的解码以适应播放器的播放需求\",\"5). 订阅者播放流媒体数据 \",\"订阅者只是一个泛称,可以是音视频播放器、其他推流服务(比如 Nginx)、其他进程、文件、socket ……\",\"可以直接播放，也可以将收到的码流数据保存到本地，也可以通过 socket 等方式发送给其他进程，也可以推流给其他流媒体服务\"]},\"29\":{\"h\":\"实现方式\",\"t\":[\"上面的通信流程只是一种理论上的流程。在实际的实现中，可以根据自己的是实际需求做合理的调整。\",\"下发指令 0x9101 指令是通过 JT/T 808 服务(暂且称之为 InstructionService) 实现的 \",\"InstructionService 一般都是多实例部署的\",\"所以下发指令之前，还需确认你想调阅的设备到底在哪个 InstructionService 实例上?\",\"所以在 InstructionService 之前应该还有个统一的\\\"控制台服务\\\"(暂且称之为 ConsoleService)\",\"ConsoleService 除了做负载均衡，实例选择的功能外，还应该有一些其他的功能，比如认证授权、权限管理、……\",\"订阅者 \",\"订阅者看你实际需求，一般都是音视频播放器\",\"在逻辑上来说，订阅者和 ConsoleService 是独立的；但在实现上来说是可以耦合在一起的\",\"比如本项目提供的 jt-dashboard-server 就是将订阅者和 ConsoleService 合二为一，提供了网页播放器\",\"物理视图 VS 逻辑视图 \",\"逻辑视图介绍了 ConsoleService、InstructionService 、 流媒体服务 和 订阅者 之间的关系\",\"而具体的实现即物理视图不一定非要每个角色一个服务 \",\"看实际情况自行优化\",\"可能每个角色都部署在同一个服务中(不推荐)\",\"也可能每个角色都部署在各自不同的服务中\",\"也可能挑选出某些角色合而为一\"]},\"30\":{\"h\":\"协议扫盲\"},\"31\":{\"h\":\"请先读我\",\"t\":[\"1078 协议目前(2023-11-25 ) 就 2016 一个版本。\",\"但是 808 协议有 2013 和 2019 不同版本：\",\"2013 版本的终端手机号是 BCD[6]\",\"2019 版本的终端手机号是 BCD[10]\",\"有关 1078 的 SIM 和 808 的 terminalId 的对应关系，参见 SIM转换 章节。\"]},\"32\":{\"h\":\"基础\"},\"33\":{\"h\":\"Jt1078Publisher\",\"t\":[\"Jt1078Publisher 是订阅 1078 码流的关键组件。\",\"通过指定 SIM号 和 逻辑通道号 来订阅码流。\",\"提示\",\"Jt1078Publisher 提供的一些列 subscribe() 方法最终返回的都是 Flux<S> 类型:\",\"Flux 可以简单理解为一个异步的无限的流式的数据源，会源源不断地输出码流数据；\",\"更多有关 Flux 的细节请参考官方文档: https://projectreactor.io\",\"泛型参数<S> 表示的是当前订阅返回的码流数据，S 的具体类型取决于你使用的 Jt1078ChannelCollector\",\"public interface Jt1078Publisher { Jt1078TerminalIdConverter terminalIdConverter(); /** * 当客户端断开时会给下游发送 {@link Jt1078SessionDestroyException} 异常信号, 订阅者应该处理这个异常 * * @see io.github.hylexus.jt.jt1078.spec.impl.subscription.BuiltinJt1078SessionCloseListener#onSessionClose(Jt1078Session, Jt1078SessionCloseReason) */ default <S extends Jt1078Subscription> Flux<S> subscribe(Class<? extends Jt1078ChannelCollector<S>> cls, String sim, short channelNumber, Duration timeout) { return this.doSubscribe(cls, sim, channelNumber, timeout).dataStream(); } default <S extends Jt1078Subscription> Flux<S> subscribe(Class<? extends Jt1078ChannelCollector<S>> cls, Jt1078SubscriberCreator creator) { return this.doSubscribe(cls, creator).dataStream(); } /** * 当客户端断开时会给下游发送 {@link Jt1078SessionDestroyException} 异常信号, 订阅者应该处理这个异常 * * @see io.github.hylexus.jt.jt1078.spec.impl.subscription.BuiltinJt1078SessionCloseListener#onSessionClose(Jt1078Session, Jt1078SessionCloseReason) */ default <S extends Jt1078Subscription> Jt1078Subscriber<S> doSubscribe(Class<? extends Jt1078ChannelCollector<S>> cls, String sim, short channelNumber, Duration timeout) { return this.doSubscribe(cls, Jt1078SubscriberCreator.builder().sim(sim).channelNumber(channelNumber).timeout(timeout).metadata(Collections.emptyMap()).build()); } <S extends Jt1078Subscription> Jt1078Subscriber<S> doSubscribe(Class<? extends Jt1078ChannelCollector<S>> cls, Jt1078SubscriberCreator creator); /** * @param id {@link Jt1078Subscriber#id()} * @see #doSubscribe(Class, String, short, Duration) */ default void unsubscribe(String id) { this.unsubscribe(id, null); } /** * @param id {@link Jt1078Subscriber#id()} * @param reason 如果 {@code reason} 为空，发送 {@link reactor.core.publisher.SignalType#ON_COMPLETE ON_COMPLETE} 信号以表示当前订阅终止。 * 否则发送 {@link reactor.core.publisher.SignalType#ON_ERROR ON_ERROR} 信号以表示当前订阅终止。 * @see #doSubscribe(Class, String, short, Duration) */ void unsubscribe(String id, @Nullable Jt1078SubscriberCloseException reason); /** * @param sim {@link Jt1078Request#sim()} */ default void unsubscribeWithSim(String sim) { this.unsubscribeWithSim(terminalIdConverter().convert(sim), null); } /** * @param sim {@link Jt1078Request#sim()} * @param reason 如果 {@code reason} 为空，发送 {@link reactor.core.publisher.SignalType#ON_COMPLETE ON_COMPLETE} 信号以表示当前订阅终止。 * 否则发送 {@link reactor.core.publisher.SignalType#ON_ERROR ON_ERROR} 信号以表示当前订阅终止。 */ void unsubscribeWithSim(String sim, @Nullable Jt1078SubscriberCloseException reason); default void unsubscribeWithSimAndChannelNumber(String sim, short channelNumber) { this.unsubscribeWithSimAndChannelNumber(terminalIdConverter().convert(sim), channelNumber, null); } void unsubscribeWithSimAndChannelNumber(String sim, short channelNumber, @Nullable Jt1078SubscriberCloseException reason); } \"]},\"34\":{\"h\":\"Jt1078SessionManager\",\"t\":[\"通过 Jt1078SessionManager 可以管理和当前服务端连接的客户端会话信息。\",\"public interface Jt1078SessionManager { Jt1078TerminalIdConverter terminalIdConverter(); AttributeKey<Jt1078Session> ATTR_KEY_SESSION = AttributeKey.newInstance(\\\"jt1078.session\\\"); Logger LOGGER = LoggerFactory.getLogger(Jt1078SessionManager.class); Optional<Jt1078Session> findBySessionId(String sessionId); default Optional<Jt1078Session> findBySimAndChannel(String sim, short channelNumber) { return this.findBySimAndChannel(sim, channelNumber, false); } Optional<Jt1078Session> findBySimAndChannel(String sim, short channelNumber, boolean updateLastCommunicateTime); default String generateSessionId(String sim, short channelNumber) { return sim + \\\"_\\\" + channelNumber; } default Jt1078Session generateSession(Jt1078Request request, Channel channel) { final String sessionId = this.generateSessionId(request.sim(), request.channelNumber()); return DefaultJt1078Session.builder() .sessionId(sessionId) .sim(request.sim()) .channelNumber(request.channelNumber()) .channel(channel) .lastCommunicateTimestamp(System.currentTimeMillis()) .build(); } Jt1078Session persistenceIfNecessary(Jt1078Request request, Channel channel); void persistence(Jt1078Session session); Optional<Jt1078Session> removeBySessionId(String sessionId); void removeBySimAndThenClose(String sim, Jt1078SessionCloseReason reason); Optional<Jt1078Session> removeBySessionIdAndThenClose(String sessionId, Jt1078SessionCloseReason reason); default Optional<Jt1078Session> removeBySimAndChannelAndThenClose(String sim, short channelNumber, Jt1078SessionCloseReason closeReason) { final Optional<Jt1078Session> optionalSession = this.findBySimAndChannel(sim, channelNumber, false); optionalSession.ifPresent(session -> { // this.removeBySessionIdAndThenClose(session.sessionId(), closeReason); }); return optionalSession; } Jt1078SessionManager addListener(Jt1078SessionEventListener listener); List<Jt1078SessionEventListener> getListeners(); Stream<Jt1078Session> list(); long count(); } \"]},\"35\":{\"h\":\"Jt1078TerminalIdConverter\",\"t\":[\"1078 的 SIM 为 BCD[6]，但是在 808 协议里：\",\"v2011 或 v2013 版的终端手机号就是 BCD[6]\",\"v2019的终端手机号是 BCD[10]\",\"这就需要一个 SIM 号的转换器了。Jt1078TerminalIdConverter 就是用来做这个的。\",\" @FunctionalInterface public interface Jt1078TerminalIdConverter extends Function<String, String> { String convert(String original); default String apply(String s) { return this.convert(s); } } \",\"默认实现是只保留最后 12 个字符：\",\"public class DefaultJt1078TerminalIdConverter implements Jt1078TerminalIdConverter { @Override public String convert(String original) { // BCD[6] ==> 12 // 视为 2013||2011 版 if (original.length() <= 12) { return original; } // 视为 2019 ==> 只保留最后 12 位 return original.substring(original.length() - 12); } } \",\"如果默认实现不满足你的要求，声明一个 Jt1078TerminalIdConverter 的 Bean 替换掉内置的就行。\"]},\"36\":{\"h\":\"请求消息处理器\",\"t\":[\"当 Jt1078 码流上报到服务端之后，会封装成 Jt1078Request，然后交由 Jt1078RequestHandler 去处理。\",\"Jt1078RequestHandler 可以有多个，默认会找到第一个 support(request) 返回 true 的实例去处理。\",\"多个 Jt1078RequestHandler 实例之间的测试顺序(调用support(request)方法的顺序) 由 getOrder() 方法的返回值决定\",\"public interface Jt1078RequestHandler extends OrderedComponent { boolean support(Jt1078Request request); void handle(Jt1078Request request); @Override default int getOrder() { return BUILTIN_COMPONENT_ORDER; } } \",\"默认实现是 DefaultPublisherBasedJt1078RequestHandler，直接委托给了 Jt1078PublisherInternal。\"]},\"37\":{\"h\":\"请求处理流程\",\"t\":[\"...\"]},\"38\":{\"h\":\"请求分包合并\"},\"39\":{\"h\":\"分包合并\",\"t\":[\"收到终端上报的分包请求时，会先将分包消息 暂存 到 分包合并器 Jt1078RequestSubPackageCombiner\",\"/** * 子包合并器 * * @see io.github.hylexus.jt.jt1078.support.codec.impl.CaffeineJt1078RequestSubPackageCombiner * @see #NO_OPS * @see io.github.hylexus.jt.jt1078.support.dispatcher.impl.DefaultPublisherBasedJt1078RequestHandler#handle(Jt1078Request) */ public interface Jt1078RequestSubPackageCombiner { /** * 尝试合并子包 * * <ol> * <li> * 如果能通过当前请求组装出一个完整的包，就返回组装之后的完整的包 * </li> * <li> * 否则就返回 {@link Optional#empty()}, <span color=\\\"red\\\">不要</span>返回 {@code null} * </li> * </ol> * * @param request 当前请求(有可能是原子包，也有可能是子包) * @return 合并之后的新请求 * @see io.github.hylexus.jt.jt1078.support.codec.impl.CaffeineJt1078RequestSubPackageCombiner */ Optional<Jt1078Request> tryCombine(Jt1078Request request); /** * 空实现: 分包请求不会自动合并(意味着下游可能会收到尚未合并的子包) * * @see io.github.hylexus.jt.jt1078.support.dispatcher.impl.DefaultPublisherBasedJt1078RequestHandler#handle(Jt1078Request) */ Jt1078RequestSubPackageCombiner NO_OPS = request -> { request.retain(); return Optional.of(request); }; } \",\"默认实现是基于 Caffeine 的 CaffeineJt1078RequestSubPackageCombiner。\"]},\"40\":{\"h\":\"相关配置\",\"t\":[\"如何你使用的是内置的基于 Caffeine 的分包合并逻辑。你可以参考下面的配置项。\",\"jt1078: request-sub-package-combiner: type: caffeine # 当且仅当 jt1078.request-sub-package-combiner.type = Caffeine 时有效 caffeine: maximum-size: 1024 # 最大缓存条目 ttl: 30s # 缓存过期时间 \"]},\"41\":{\"h\":\"入门\"},\"42\":{\"h\":\"快速开始\",\"t\":[\"请先读我\",\"如果你还不熟悉整个通信流程，建议先阅读 协议扫盲--通信流程\",\"此处将展示一个 最少配置 的 1078协议 消息处理服务的搭建。\",\"传送门\",\"本小节的示例可以在 samples/jt-1078-server-sample-webflux-boot3 和 samples/jt-1078-server-sample-webmvc-boot3 下找到对应代码。\"]},\"43\":{\"h\":\"创建工程\",\"t\":[\"创建一个空的 spring-boot 工程。\",\"传送门\",\"可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。\"]},\"44\":{\"h\":\"添加依赖\"},\"45\":{\"h\":\"spring-boot-2.x\",\"t\":[\"使用 spring-boot-2.x 的项目引入为 1078协议 提供的 jt-1078-server-spring-boot-starter-boot2\"]},\"46\":{\"h\":\"spring-boot-3.x\",\"t\":[\"使用 spring-boot-3.x 的项目引入为 1078协议 提供的 jt-1078-server-spring-boot-starter\"]},\"47\":{\"h\":\"配置\",\"t\":[\"application.yml\",\"jt1078: server: port: 61078 logging: level: root: info io.github.hylexus.jt.jt1078.support.dispatcher.Jt1078RequestHandler: debug io.github.hylexus.jt.jt1078.support.netty.Jt1078DispatcherChannelHandler: debug \"]},\"48\":{\"h\":\"注册你自己的订阅者\",\"t\":[\"通过 Jt1078Publisher 实例来注册你自己的码流订阅者。\"]},\"49\":{\"h\":\"伪代码\",\"t\":[\"一般流程大致像下面伪代码所示：\",\" @Slf4j @Component public class SomeClass { private final Jt1078Publisher publisher; // 自动注入 Jt1078Publisher 实例 public SomeClass(Jt1078Publisher publisher) { this.publisher = publisher; } // 订阅 SIM 号为 \\\"139xxxxxx\\\" 的终端的 \\\"3\\\" 号逻辑通道 // 并将码流中的 H.264 转为 FLV private void subscribeFlvStream() { final int timeout = 30; // 30s 内没有任何数据，订阅自动关闭 final String sim = \\\"139xxxxxx\\\"; // SIM 号 final short channel = 3; // 逻辑通道号 // Jt1078ChannelCollector.H264_TO_FLV_COLLECTOR: 当前订阅使用H264_TO_FLV_COLLECTOR将码流数据中的H.264转换为FLV this.publisher.subscribe(Jt1078ChannelCollector.H264_TO_FLV_COLLECTOR, sim, channel, Duration.ofSeconds(timeout)) // [可选] .publishOn(WebSocketConfig.SCHEDULER) // 发生 Jt1078SessionDestroyException 和 TimeoutException 异常时结束当前订阅 .onErrorComplete(Jt1078SessionDestroyException.class) .onErrorComplete(TimeoutException.class) // [可选] 当前 session 销毁时回调 .doOnError(Jt1078SessionDestroyException.class, e -> { log.error(\\\"取消订阅(Session销毁)\\\"); }) // [可选] 超时时回调 .doOnError(TimeoutException.class, e -> { log.error(\\\"取消订阅(超时, {} 秒)\\\", timeout); }) // [可选] 发生其他异常时回调 .doOnError(Throwable.class, e -> { log.error(e.getMessage(), e); // 异常结束 // sseEmitter.completeWithError(e); }) // [可选] 当有数据到来时打印日志 [仅仅用于 debug] .doOnNext(subscription -> { final byte[] payload = subscription.payload(); log.info(\\\"Http outbound {}\\\", FormatUtils.toHexString(payload)); }) // 当前留结束时(异常/正常) .doFinally(signalType -> { log.info(\\\"Http outbound complete with signal: {}\\\", signalType); // 自动关闭当前 session if (params.isAutoCloseJt1078SessionOnClientClosed()) { this.sessionManager.removeBySimAndChannelAndThenClose(params.getSim(), params.getChannel(), MyJt1078SessionCloseReason.CLOSED_BY_WEB_SOCKET); log.info(\\\"Jt1078SessionClosed By HttpStream: {}\\\", params); } // 正常结束 // sseEmitter.complete(); }).subscribe(subscription -> { // payload就是转换之后的码流数据，你可以将其发送到任何你想发送的地方(WebSocket、HTTP、文件、支持 rtmp 的其他推流服务、………………) // payload就是转换之后的码流数据，你可以将其发送到任何你想发送的地方(WebSocket、HTTP、文件、支持 rtmp 的其他推流服务、………………) // payload就是转换之后的码流数据，你可以将其发送到任何你想发送的地方(WebSocket、HTTP、文件、支持 rtmp 的其他推流服务、………………) final byte[] payload = subscription.payload(); try { log.info(\\\"send: {}\\\", FormatUtils.toHexString(payload)); // sseEmitter.send(payload, MediaType.APPLICATION_OCTET_STREAM); } catch (IOException e) { // sseEmitter.completeWithError(e); log.error(\\\"\\\", e); } }); } } \"]},\"50\":{\"h\":\"HTTP订阅示例\",\"t\":[\"提示\",\"HTTP 播放码流的话，卡顿严重不太推荐，推荐使用 WebSocket\",\"另外，也不太推荐 SpringMVC，更推荐 SpringWebFlux\",\"但是此处还是以 SpringMVC 为例，因为大多数用户对 MVC 比较熟悉一点\",\" @Slf4j @Controller @RequestMapping(\\\"/jt1078/subscription/http/flv\\\") public class FlvStreamSubscriberDemoHttp { public static final Scheduler BOUNDED_ELASTIC = Schedulers.newBoundedElastic(8, 128, \\\"HttpDemo\\\"); private final Jt1078SessionManager sessionManager; private final Jt1078Publisher publisher; public FlvStreamSubscriberDemoHttp(Jt1078SessionManager sessionManager, Jt1078Publisher publisher) { this.sessionManager = sessionManager; this.publisher = publisher; } @RequestMapping(value = \\\"/{sim}/{channel}\\\") public ResponseBodyEmitter handle( // HttpServletResponse response, DemoVideoStreamSubscriberDto params) { // response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE); final ResponseBodyEmitter sseEmitter = new ResponseBodyEmitter(0L); this.subscribeFlvStream(params, sseEmitter); return sseEmitter; } private void subscribeFlvStream(DemoVideoStreamSubscriberDto params, ResponseBodyEmitter sseEmitter) { final int timeout = params.getTimeout(); this.publisher.subscribe(Jt1078ChannelCollector.H264_TO_FLV_COLLECTOR, params.getSim(), params.getChannel(), Duration.ofSeconds(timeout)) .publishOn(BOUNDED_ELASTIC) .onErrorComplete(Jt1078SessionDestroyException.class) .onErrorComplete(TimeoutException.class) .doOnError(Jt1078SessionDestroyException.class, e -> { log.error(\\\"取消订阅(Session销毁)\\\"); }) .doOnError(TimeoutException.class, e -> { log.error(\\\"取消订阅(超时, {} 秒)\\\", timeout); }) .doOnError(Throwable.class, e -> { log.error(e.getMessage(), e); // 异常结束 sseEmitter.completeWithError(e); }) .doOnNext(subscription -> { final byte[] payload = subscription.payload(); log.info(\\\"Http outbound {}\\\", FormatUtils.toHexString(payload)); }) .doFinally(signalType -> { log.info(\\\"Http outbound complete with signal: {}\\\", signalType); if (params.isAutoCloseJt1078SessionOnClientClosed()) { this.sessionManager.removeBySimAndChannelAndThenClose(params.getSim(), params.getChannel(), MyJt1078SessionCloseReason.CLOSED_BY_WEB_SOCKET); log.info(\\\"Jt1078SessionClosed By HttpStream: {}\\\", params); } // 正常结束 sseEmitter.complete(); }).subscribe(subscription -> { final byte[] payload = subscription.payload(); try { // 异常结束 log.info(\\\"send: {}\\\", FormatUtils.toHexString(payload)); sseEmitter.send(payload, MediaType.APPLICATION_OCTET_STREAM); } catch (IOException e) { sseEmitter.completeWithError(e); } }); } } \"]},\"51\":{\"h\":\"WebSocket订阅示例\",\"t\":[\"提示\",\"推荐使用 WebSocket\",\"另外，也不太推荐 SpringMVC，更推荐 SpringWebFlux\",\"但是此处还是以 SpringMVC 为例，因为大多数用户对 MVC 比较熟悉一点\",\" @Slf4j public class FlvStreamSubscriberDemoWebSocket extends AbstractWebSocketHandler { public static final Scheduler BOUNDED_ELASTIC = Schedulers.newBoundedElastic(8, 128, \\\"HttpDemo\\\"); public static final String PATH_PATTERN = \\\"/jt1078/subscription/websocket/flv/{sim}/{channel}\\\"; private final Map<String, WebSocketSession> sessionMap = new ConcurrentHashMap<>(); private final UriTemplate uriTemplate; private final Jt1078Publisher publisher; public FlvStreamSubscriberDemoWebSocket(Jt1078Publisher publisher) { this.publisher = publisher; this.uriTemplate = new UriTemplate(PATH_PATTERN); } @Override public void afterConnectionEstablished(@NonNull WebSocketSession session) throws Exception { final DemoVideoStreamSubscriberDto params = WebSocketUtils.createForBlockingSession(session, this.uriTemplate); log.info(\\\"New FLV publisher created via WebSocket: {}\\\", params); synchronized (this.sessionMap) { sessionMap.put(session.getId(), session); } this.publisher.subscribe(Jt1078ChannelCollector.H264_TO_FLV_COLLECTOR, params.getSim(), params.getChannel(), Duration.ofSeconds(params.getTimeout())) .publishOn(BOUNDED_ELASTIC) .onErrorComplete(Jt1078SessionDestroyException.class) .onErrorComplete(TimeoutException.class) .doOnError(Jt1078SessionDestroyException.class, e -> { log.error(\\\"取消订阅(Session销毁)\\\"); }) .doOnError(TimeoutException.class, e -> { log.error(\\\"取消订阅(超时, {} 秒)\\\", params.getTimeout()); }) .doOnError(Throwable.class, e -> { log.error(e.getMessage(), e); }) .doOnNext(subscription -> { final byte[] data = subscription.payload(); log.info(\\\"WebSocket outbound: {}\\\", HexStringUtils.bytes2HexString(data)); try { session.sendMessage(new BinaryMessage(data)); } catch (Throwable e) { throw new RuntimeException(e); } }) .doFinally(signalType -> { synchronized (this.sessionMap) { final WebSocketSession remove = sessionMap.remove(session.getId()); if (remove != null) { try { remove.close(); } catch (IOException e) { throw new RuntimeException(e); } } } }) .subscribe(); log.info(\\\"session add : {}\\\", session); } @Override public void afterConnectionClosed(WebSocketSession session, @NonNull CloseStatus closeStatus) throws Exception { synchronized (this.sessionMap) { final WebSocketSession removed = this.sessionMap.remove(session.getId()); if (removed != null) { removed.close(); } } log.info(\\\"session {} closed with status {}\\\", session, closeStatus); } } \",\"将上面的 WebSocket 处理器注册到 SpringMVC 的消息处理流程中。\",\" @Configuration @EnableWebSocket public class WebSocketConfig implements WebSocketConfigurer { private final Jt1078Publisher jt1078Publisher; public WebSocketConfig(Jt1078Publisher jt1078Publisher) { this.jt1078Publisher = jt1078Publisher; } @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) { registry.addHandler(webSocketSubscriberDemoFlv(), FlvStreamSubscriberDemoWebSocket.PATH_PATTERN) .setAllowedOrigins(\\\"*\\\"); } @Bean public WebSocketHandler webSocketSubscriberDemoFlv() { return new FlvStreamSubscriberDemoWebSocket(this.jt1078Publisher); } } \"]},\"52\":{\"h\":\"测试\"},\"53\":{\"h\":\"启动项目\",\"t\":[\"至此，对 1078消息 的处理服务已经搭建完毕。启动 spring-boot 项目开始测试。\",\"提示\",\"在你订阅某个终端的某个通道之后，记得给设备发送一个 0x9101 消息，让设备上传数据到你的 1078 服务端。\"]},\"54\":{\"h\":\"HTTP客户端订阅\",\"t\":[\"如果你要用 HTTP 协议来播放 FLV 视频流，现在就可以访问了。使用任意一款支持 FLV 协议的视频播放播放视频即可。\",\"提示\",\"播放地址：http://127.0.0.1:1078/jt1078/subscription/http/flv/{SIM}/{channelNumber}?timeout=10000\",\"将其中的 SIM 换成你自己的终端手机号，channelNumber 换成你要订阅的逻辑通道号\",\"推荐视频播放器: VLC media player、flv.js 或 mpegts.js\",\"HTML示例参见 附录--mpegts.js\"]},\"55\":{\"h\":\"WebSocket客户端订阅\",\"t\":[\"如果你要用 WebSocket 协议来播放 FLV 视频流，你需要找一款支持 WebSocket 协议的 FLV 播放器。\",\"提示\",\"播放地址: ws://127.0.0.1:1078/jt1078/subscription/websocket/flv/{SIM}/{channelNumber}?timeout=10000\",\"将其中的 SIM 换成你自己的终端手机号，channelNumber 换成你要订阅的逻辑通道号\",\"推荐播放器: flv.js 或 mpegts.js\",\"HTML示例参见 附录--mpegts.js\"]},\"56\":{\"h\":\"发报文\",\"t\":[\"提示\",\"正常情况应该是给设备下发一个 0x9101 消息，然后设备会上传码流数据到 0x9101 消息中指定的服务器。\",\"在这个 quickstart 的场景下，你自己随便找个报文，然后上传到 127.0.0.1 的 61078 端口就可以了。\",\"传送门\",\"本小节的示例可以在 samples/jt-1078-server-sample-webflux-boot3\\n和 samples/jt-1078-server-sample-webmvc-boot3 下找到对应代码。\"]},\"57\":{\"h\":\"基本术语\"},\"58\":{\"h\":\"Jt1078Request\",\"t\":[\"客户端请求消息中的字节流最终会解析到 Jt1078Request 里。Jt1078Request 接口内容如下：\",\"public interface Jt1078Request { static Jt1078RequestBuilder newBuilder() { return new DefaultJt1078Request(); } Jt1078RequestHeader header(); @Nullable ByteBuf rawByteBuf(); /** * 请求体 */ ByteBuf body(); default void release() { JtCommonUtils.release(this.rawByteBuf(), this.body()); } default Jt1078Request retain() { final ByteBuf byteBuf = rawByteBuf(); if (byteBuf != null) { byteBuf.retain(); } body().retain(); return this; } default Jt1078Request copy() { return this.mutate().header(this.header()).body(this.body().copy()).rawByteBuf(null).build(); } default Jt1078RequestBuilder mutate() { return new DefaultJt1078Request(this); } // short-cut methods default String sim() { return header().sim(); } default short channelNumber() { return header().channelNumber(); } default int msgBodyLength() { return header().msgBodyLength(); } default byte pt() { return header().pt(); } default Jt1078PayloadType payloadType() { return header().payloadType(); } default byte dataTypeValue() { return header().dataTypeValue(); } Map<String, Object> attributes(); default Jt1078Request attribute(String key, Object value) { attributes().put(key, value); return this; } interface Jt1078RequestBuilder { Jt1078RequestBuilder header(Jt1078RequestHeader header); default Jt1078RequestBuilder body(ByteBuf body) { return this.body(body, true); } Jt1078RequestBuilder body(ByteBuf body, boolean autoRelease); default Jt1078RequestBuilder rawByteBuf(ByteBuf rawByteBuf) { return this.rawByteBuf(rawByteBuf, true); } Jt1078RequestBuilder rawByteBuf(ByteBuf rawByteBuf, boolean autoRelease); Jt1078Request build(); } } \"]},\"59\":{\"h\":\"Jt1078Session\",\"t\":[\"和客户端对应的连接都用一个叫做 Jt1078Session 类来表示：\",\"public interface Jt1078Session { String sim(); short channelNumber(); default String terminalId() { return this.sim(); } String sessionId(); Channel channel(); Jt1078Session channel(Channel channel); long lastCommunicateTimestamp(); Jt1078Session lastCommunicateTimestamp(long time); long createdAt(); } \"]},\"60\":{\"h\":\"辅助工具\"},\"61\":{\"h\":\"编码解码相关\"},\"62\":{\"h\":\"Jt808MsgDecoder\",\"t\":[\"Jt1078MsgDecoder 负责将请求中的 字节流 初步解析为 Jt1078Request 对象。\",\"如果内置的实现不符合要求 或者 内置实现返回的 Jt1078Request 不符合要求，你可以自定义一个解码器。\",\"声明一个 Jt1078MsgDecoder 类型的 Bean 就可以替换内置实现。\",\"public interface Jt1078MsgDecoder { Jt1078Request decode(ByteBuf byteBuf); } \"]},\"63\":{\"h\":\"定制\"},\"64\":{\"h\":\"Netty相关\",\"t\":[\"要自定义 Netty 相关配置，只需声明一个 Jt1078ServerNettyConfigure 类型的 Bean 即可。\",\"public interface Jt1078ServerNettyConfigure { void configureServerBootstrap(ServerBootstrap serverBootstrap); void configureSocketChannel(SocketChannel ch); } \"]},\"65\":{\"h\":\"请求生命周期监听器\"},\"66\":{\"h\":\"介绍\",\"t\":[\"一个终端请求的处理，包含下面几个比较关键的步骤：\",\"decode: 将 ByteBuf 初步解码为 Jt1078Request\",\"此时消息整体结构已经解码完成\",\"dispatch: 将上一步初步解码的 Jt1078Request 对象 分发 出去 \",\"如果是分包请求, 会在 Jt1078RequestSubPackageCombiner 里暂存分包\",\"否则，进行下一步\",\"handle: 将请求(包括合并后的分包请求)转发给 Jt1078RequestHandler 处理\",\"对应上面描述的处理流程，提供了 Jt1078RequestLifecycleListener 以便在消息处理流程的关键步骤:\",\"加入自己的逻辑\",\"拦截请求的处理流程\",\"点击展开 Jt1078RequestLifecycleListener 接口声明\",\"public interface Jt1078RequestLifecycleListener extends OrderedComponent { /** * @param request 尚未解码的原始报文 * @param channel 当前终端对应的 {@link Channel} * @see io.github.hylexus.jt.jt1078.support.netty.Jt1078DispatcherChannelHandler#channelRead(ChannelHandlerContext, Object) */ default boolean beforeDecode(ByteBuf request, Channel channel) { return true; } /** * @param request 初步解码后的请求(分包合并之前) * @see io.github.hylexus.jt.jt1078.support.netty.Jt1078DispatcherChannelHandler#channelRead(ChannelHandlerContext, Object) */ default boolean beforeDispatch(Jt1078Request request, Channel channel) { return true; } /** * @see io.github.hylexus.jt.jt1078.support.dispatcher.Jt1078RequestHandler#handle(Jt1078Request) */ default boolean beforeHandle(Jt1078Request request) { return true; } } \"]},\"67\":{\"h\":\"Session相关\"},\"68\":{\"h\":\"Jt1078SessionManager\",\"t\":[\"该组件用来管理每个终端的 TCP 连接。\",\"要定制 Jt1078SessionManager 只需自己声明一个 Jt1078SessionManager 类型的 Bean 即可。\"]},\"69\":{\"h\":\"Jt1078SessionEventListener\",\"t\":[\"Jt1078SessionEventListener 会在 Jt1078SessionManager 中新增、删除 或 关闭 Jt1078Session 时回调。\",\"public interface Jt1078SessionEventListener extends OrderedComponent { default void onSessionAdd(@Nullable Jt1078Session session) { } default void onSessionRemove(@Nullable Jt1078Session session) { } default void onSessionClose(@Nullable Jt1078Session session, Jt1078SessionCloseReason closeReason) { } } \",\"想要监听 Jt1078Session 事件：\",\"声明若干个 Jt1078SessionEventListener 类型的 Bean 即可\",\"或者可以直接调用 Jt1078SessionManager.addListener(listener) 方法手动注册监听器\",\"// Session事件监听器 @Configuration public class MyJt1078Config { // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt1078SessionEventListener listener1() { return new MyJt1078SessionEventListener01(); } // [[ 非必须配置 ]] -- Session事件监听器 (可以有多个) @Bean public Jt1078SessionEventListener listener2() { return new MyJt1078SessionEventListener02(); } } \"]},\"70\":{\"h\":\"分包相关\",\"t\":[\"要替换内置的分包暂存器只需将 Jt1078RequestSubPackageCombiner 类型的 Bean 加入到 Spring 容器即可。\"]},\"71\":{\"h\":\"mpegts.js\",\"t\":[\"源码地址: https://github.com/xqq/mpegts.js\",\"下载地址: https://www.npmjs.com/package/mpegts.js?activeTab=code\",\"提示\",\"下面是一个基于 vue 2.0 的 mpegts.js 简单的示例性的播放器：\",\"效果图：\",\"源码：\",\"<!doctype html> <html lang=\\\"zh\\\"> <head> <title>1078</title> <meta charset=\\\"UTF-8\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\\\"> </head> <body> <div id=\\\"app\\\"> <el-card class=\\\"box-card my-box\\\"> <div slot=\\\"header\\\" class=\\\"clearfix\\\"> <span>播放器: 本示例仅仅支持 `WebSocket/Http` 协议</span> </div> <div> <el-form size=\\\"mini\\\" inline> <el-form-item label=\\\"视频流协议类型\\\"> <el-radio-group v-model=\\\"videoProtocolType\\\" size=\\\"mini\\\"> <el-radio-button :label=\\\"'ws'\\\">WebSocket</el-radio-button> <el-radio-button :label=\\\"'http'\\\">Http</el-radio-button> </el-radio-group> </el-form-item> <el-form-item label=\\\"SIM\\\" size=\\\"mini\\\"> <el-input v-model=\\\"sim\\\"/> </el-form-item> <el-form-item label=\\\"逻辑通道号\\\"> <el-select v-model=\\\"channelNumber\\\" clearable allow-create filterable placeholder=\\\"请选择\\\"> <el-option v-for=\\\"item in formConfig.channelTypes\\\" :key=\\\"item.value\\\" :label=\\\"item.label\\\" :value=\\\"item.value\\\"> </el-option> </el-select> </el-form-item> <br/> <el-form-item label=\\\"1078服务IP\\\"> <el-input type=\\\"text\\\" v-model=\\\"jt1078ServerIp\\\" size=\\\"mini\\\" style=\\\"width: 140px\\\"/> </el-form-item> <el-form-item label=\\\"1078服务端口(HTTP)\\\"> <el-input-number v-model=\\\"jt1078ServerPortHttp\\\" :controls=\\\"false\\\" size=\\\"mini\\\" style=\\\"width: 80px\\\"/> </el-form-item> <el-form-item label=\\\"音频类型\\\"> <el-select v-model=\\\"sourceAudioHints\\\" placeholder=\\\"未指定\\\" filterable clearable> <el-option-group v-for=\\\"group in formConfig.audioTypes\\\" :key=\\\"group.groupName\\\" :label=\\\"group.groupName\\\"> <el-option v-for=\\\"item in group.options\\\" :key=\\\"item.name\\\" :label=\\\"item.desc\\\" :value=\\\"item.name\\\"> </el-option> </el-option-group> </el-select> </el-form-item> <br/> <el-form-item label=\\\"VideoUrl\\\" size=\\\"mini\\\"> <el-input v-model=\\\"videoUrl\\\" type=\\\"textarea\\\" autosize disabled style=\\\"width: 860px;font-size: 16px\\\"/> </el-form-item> <br/> <el-button type=\\\"primary\\\" size=\\\"mini\\\" @click=\\\"play\\\">播放 / 重新初始化播放器</el-button> </el-form> <video id=\\\"videoElement\\\" width=\\\"640\\\" height=\\\"480\\\" controls autoplay style=\\\"border: 3px solid #26cfee\\\"></video> </div> </el-card> </div> </body> <script src=\\\"https://unpkg.com/vue@2/dist/vue.js\\\"></script> <script src=\\\"https://unpkg.com/element-ui/lib/index.js\\\"></script> <script src=\\\"https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/axios/0.26.0/axios.js\\\"></script> <script src=\\\"./js/mpegts.js\\\"></script> <script type=\\\"text/javascript\\\"> new Vue({ el: '#app', data: { player: undefined, playing: false, // sim: \\\"015900110001\\\", videoProtocolType: \\\"ws\\\", channelNumber: 2, jt1078ServerIp: \\\"127.0.0.1\\\", jt1078ServerPortHttp: 1078, sourceAudioHints: \\\"未指定\\\", formConfig: { audioTypes: [ { groupName: \\\"默认\\\", options: [{name: \\\"未指定\\\", desc: \\\"自动\\\"}] }, { groupName: \\\"静音\\\", options: [{name: \\\"SILENCE\\\", desc: \\\"静音(服务端忽略音频数据)\\\"}] }, { groupName: \\\"G711\\\", options: [ {name: \\\"G711_A_MONO\\\", desc: \\\"G711_A_MONO\\\"}, {name: \\\"G711_U_MONO\\\", desc: \\\"G711_U_MONO\\\"}, ] }, { groupName: \\\"G726\\\", options: [ {name: \\\"G726_S16_LE_MONO\\\", desc: \\\"G726_S16_LE_MONO\\\"}, {name: \\\"G726_S24_LE_MONO\\\", desc: \\\"G726_S24_LE_MONO\\\"}, {name: \\\"G726_S32_LE_MONO\\\", desc: \\\"G726_S32_LE_MONO\\\"}, {name: \\\"G726_S40_LE_MONO\\\", desc: \\\"G726_S40_LE_MONO\\\"}, ] }, { groupName: \\\"ADPCM\\\", options: [{name: \\\"ADPCM_IMA_MONO\\\", desc: \\\"ADPCM_IMA_MONO\\\"},] } ], channelTypes: [ {value: 1, label: \\\"通道1--驾驶员--音视频/视频\\\"}, {value: 2, label: \\\"通道2--车辆正前方--音视频/视频\\\"}, {value: 3, label: \\\"通道3--车前门--音视频/视频\\\"}, {value: 4, label: \\\"通道4--车厢前部--音视频/视频\\\"}, {value: 5, label: \\\"通道5--车厢后部--音视频/视频\\\"}, {value: 6, label: \\\"通道6--车后门--音视频/视频\\\"}, {value: 7, label: \\\"通道7--行李舱--音视频/视频\\\"}, {value: 8, label: \\\"通道8--车辆左侧--音视频/视频\\\"}, {value: 9, label: \\\"通道9--车辆右侧--音视频/视频\\\"}, {value: 10, label: \\\"通道10--车辆正后方--音视频/视频\\\"}, {value: 11, label: \\\"通道11--车厢中部--音视频/视频\\\"}, {value: 12, label: \\\"通道12--车中部--音视频/视频\\\"}, {value: 13, label: \\\"通道13--驾驶席车门--音视频/视频\\\"}, {value: 33, label: \\\"通道33--驾驶员--音频\\\"}, {value: 36, label: \\\"通道36--车厢前部--音频\\\"}, {value: 37, label: \\\"通道37--车厢后部--音频\\\"}, ], }, }, created: function () { this.jt1078ServerPortHttp = window.location.port }, computed: { videoUrl: function () { return this.constructUrl() }, }, methods: { play: function () { this.recreatePlayer() this.player.play(); this.playing = true }, constructUrl: function () { var url = this.videoProtocolType + \\\"://\\\" + this.jt1078ServerIp + \\\":\\\" + this.jt1078ServerPortHttp + \\\"/jt1078/subscription/\\\" + (this.videoProtocolType === 'ws' ? 'websocket' : 'http') + \\\"/flv/\\\" + this.sim + \\\"/\\\" + this.channelNumber + \\\"?timeout=10000\\\"; if (this.sourceAudioHints && this.sourceAudioHints !== \\\"\\\" && this.sourceAudioHints !== \\\"未指定\\\") { url += \\\"&sourceAudioHints=\\\" + this.sourceAudioHints; } return url }, recreatePlayer: function () { const element = document.getElementById('videoElement'); if (this.player != null) { this.player.unload(); this.player.detachMediaElement(); this.player.destroy(); } const url = this.constructUrl() this.player = mpegts.createPlayer({ isLive: true, type: 'flv', url: url, hasAudio: this.sourceAudioHints !== \\\"SILENCE\\\", hasVideo: true, enableWorker: true, enableStashBuffer: false, stashInitialSize: 128 // 减少首桢显示等待时长 }); this.player.attachMediaElement(element); this.player.load(); }, }, watch: {} }) </script> <style type=\\\"text/css\\\"> .my-box { margin-bottom: 10px; } </style> </html> \"]},\"72\":{\"h\":\"Flv Web Player\"},\"73\":{\"h\":\"Appendix\"}},\"dirtCount\":0,\"index\":[[\"减少首桢显示等待时长\",{\"1\":{\"71\":1}}],[\"驾驶席车门\",{\"1\":{\"71\":1}}],[\"驾驶员\",{\"1\":{\"71\":2}}],[\"9\",{\"1\":{\"71\":1}}],[\"行李舱\",{\"1\":{\"71\":1}}],[\"车中部\",{\"1\":{\"71\":1}}],[\"车辆正后方\",{\"1\":{\"71\":1}}],[\"车辆正前方\",{\"1\":{\"71\":1}}],[\"车辆右侧\",{\"1\":{\"71\":1}}],[\"车辆左侧\",{\"1\":{\"71\":1}}],[\"车后门\",{\"1\":{\"71\":1}}],[\"车厢中部\",{\"1\":{\"71\":1}}],[\"车厢后部\",{\"1\":{\"71\":2}}],[\"车厢前部\",{\"1\":{\"71\":2}}],[\"车前门\",{\"1\":{\"71\":1}}],[\"音视频\",{\"1\":{\"71\":13}}],[\"音频\",{\"1\":{\"71\":3}}],[\"音频类型\",{\"1\":{\"71\":1}}],[\"音频格式就很多了\",{\"1\":{\"28\":1}}],[\"静音\",{\"1\":{\"71\":2}}],[\"重新初始化播放器<\",{\"1\":{\"71\":1}}],[\"未指定\",{\"1\":{\"71\":4}}],[\"`websocket\",{\"1\":{\"71\":1}}],[\"zh\",{\"1\":{\"71\":1}}],[\"源码\",{\"1\":{\"71\":1}}],[\"源码地址\",{\"1\":{\"71\":1}}],[\"效果图\",{\"1\":{\"71\":1}}],[\"简单的示例性的播放器\",{\"1\":{\"71\":1}}],[\"容器即可\",{\"1\":{\"70\":1}}],[\"加入到\",{\"1\":{\"70\":1}}],[\"加入自己的逻辑\",{\"1\":{\"66\":1}}],[\"非必须配置\",{\"1\":{\"69\":2}}],[\"声明若干个\",{\"1\":{\"69\":1}}],[\"声明一个\",{\"1\":{\"35\":1,\"62\":1}}],[\"事件\",{\"1\":{\"69\":1}}],[\"想要监听\",{\"1\":{\"69\":1}}],[\"关闭\",{\"1\":{\"69\":1}}],[\"关于我们\",{\"0\":{\"0\":1}}],[\"删除\",{\"1\":{\"69\":1}}],[\"要替换内置的分包暂存器只需将\",{\"1\":{\"70\":1}}],[\"要定制\",{\"1\":{\"68\":1}}],[\"要自定义\",{\"1\":{\"64\":1}}],[\"连接\",{\"1\":{\"68\":1}}],[\"尚未解码的原始报文\",{\"1\":{\"66\":1}}],[\"接口声明\",{\"1\":{\"66\":1}}],[\"接口内容如下\",{\"1\":{\"58\":1}}],[\"点击展开\",{\"1\":{\"66\":1}}],[\"拦截请求的处理流程\",{\"1\":{\"66\":1}}],[\"以便在消息处理流程的关键步骤\",{\"1\":{\"66\":1}}],[\"以及使用的版本\",{\"1\":{\"1\":1}}],[\"包括合并后的分包请求\",{\"1\":{\"66\":1}}],[\"包含下面几个比较关键的步骤\",{\"1\":{\"66\":1}}],[\"进行下一步\",{\"1\":{\"66\":1}}],[\"出去\",{\"1\":{\"66\":1}}],[\"分发\",{\"1\":{\"66\":1}}],[\"分包相关\",{\"0\":{\"70\":1}}],[\"分包请求不会自动合并\",{\"1\":{\"39\":1}}],[\"分包合并之前\",{\"1\":{\"66\":1}}],[\"分包合并器\",{\"1\":{\"39\":1}}],[\"分包合并\",{\"0\":{\"39\":1}}],[\"分包消息\",{\"1\":{\"21\":1}}],[\"此时消息整体结构已经解码完成\",{\"1\":{\"66\":1}}],[\"此处将展示一个\",{\"1\":{\"42\":1}}],[\"初步解码后的请求\",{\"1\":{\"66\":1}}],[\"初步解码为\",{\"1\":{\"66\":1}}],[\"初步解析为\",{\"1\":{\"62\":1}}],[\"介绍\",{\"0\":{\"66\":1}}],[\"只需自己声明一个\",{\"1\":{\"68\":1}}],[\"只需声明一个\",{\"1\":{\"64\":1}}],[\"只保留最后\",{\"1\":{\"35\":1}}],[\"定制\",{\"0\":{\"63\":1}}],[\"内置实现返回的\",{\"1\":{\"62\":1}}],[\"内没有任何数据\",{\"1\":{\"49\":1}}],[\"字节流\",{\"1\":{\"62\":1}}],[\"负责将请求中的\",{\"1\":{\"62\":1}}],[\"编码解码相关\",{\"0\":{\"61\":1}}],[\"辅助工具\",{\"0\":{\"60\":1}}],[\"类来表示\",{\"1\":{\"59\":1}}],[\"类型的\",{\"1\":{\"62\":1,\"64\":1,\"68\":1,\"69\":1,\"70\":1}}],[\"类型\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"17\":1,\"18\":1,\"19\":1,\"33\":1}}],[\"里暂存分包\",{\"1\":{\"66\":1}}],[\"里\",{\"1\":{\"58\":1}}],[\"客户端请求消息中的字节流最终会解析到\",{\"1\":{\"58\":1}}],[\"基本术语\",{\"0\":{\"57\":1}}],[\"基础\",{\"0\":{\"32\":1}}],[\"端口就可以了\",{\"1\":{\"56\":1}}],[\"quickstart\",{\"1\":{\"56\":1}}],[\"qq交流群\",{\"1\":{\"1\":1}}],[\"你自己随便找个报文\",{\"1\":{\"56\":1}}],[\"你需要找一款支持\",{\"1\":{\"55\":1}}],[\"你可以自定义一个解码器\",{\"1\":{\"62\":1}}],[\"你可以将其发送到任何你想发送的地方\",{\"1\":{\"49\":3}}],[\"你可以参考下面的配置项\",{\"1\":{\"40\":1}}],[\"附录\",{\"1\":{\"54\":1,\"55\":1}}],[\"换成你要订阅的逻辑通道号\",{\"1\":{\"54\":1,\"55\":1}}],[\"换成你自己的终端手机号\",{\"1\":{\"54\":1,\"55\":1}}],[\"播放器\",{\"1\":{\"55\":1}}],[\"播放地址\",{\"1\":{\"54\":1,\"55\":1}}],[\"播放码流的话\",{\"1\":{\"50\":1}}],[\"现在就可以访问了\",{\"1\":{\"54\":1}}],[\"视频\",{\"1\":{\"71\":13}}],[\"视频流协议类型\",{\"1\":{\"71\":1}}],[\"视频流\",{\"1\":{\"54\":1,\"55\":1}}],[\"视为\",{\"1\":{\"35\":2}}],[\"让设备上传数据到你的\",{\"1\":{\"53\":1}}],[\"消息中指定的服务器\",{\"1\":{\"56\":1}}],[\"消息\",{\"1\":{\"53\":1,\"56\":1}}],[\"消息处理服务的搭建\",{\"1\":{\"42\":1}}],[\"消息处理线程池相关的配置\",{\"1\":{\"6\":1}}],[\"记得给设备发送一个\",{\"1\":{\"53\":1}}],[\"项目开始测试\",{\"1\":{\"53\":1}}],[\"项目的发展离不开你的支持\",{\"1\":{\"2\":1}}],[\"启动\",{\"1\":{\"53\":1}}],[\"启动项目\",{\"0\":{\"53\":1}}],[\"对象\",{\"1\":{\"62\":1,\"66\":1}}],[\"对\",{\"1\":{\"53\":1}}],[\"对应上面描述的处理流程\",{\"1\":{\"66\":1}}],[\"对应\",{\"1\":{\"14\":1}}],[\"至此\",{\"1\":{\"53\":1}}],[\"测试\",{\"0\":{\"52\":1}}],[\"860px\",{\"1\":{\"71\":1}}],[\"80px\",{\"1\":{\"71\":1}}],[\"808\",{\"1\":{\"27\":1,\"29\":1,\"31\":2,\"35\":1}}],[\"8\",{\"1\":{\"50\":1,\"51\":1,\"71\":2}}],[\"比较熟悉一点\",{\"1\":{\"50\":1,\"51\":1}}],[\"比如本项目提供的\",{\"1\":{\"29\":1}}],[\"比如认证授权\",{\"1\":{\"29\":1}}],[\"比如\",{\"1\":{\"27\":2,\"28\":3}}],[\"因为大多数用户对\",{\"1\":{\"50\":1,\"51\":1}}],[\"更推荐\",{\"1\":{\"50\":1,\"51\":1}}],[\"更多有关\",{\"1\":{\"33\":1}}],[\"另外\",{\"1\":{\"50\":1,\"51\":1}}],[\"另外拜托群里的各位大佬能解答一下新人的疑问\",{\"1\":{\"1\":1}}],[\"卡顿严重不太推荐\",{\"1\":{\"50\":1}}],[\"支持\",{\"1\":{\"49\":3}}],[\"自动\",{\"1\":{\"71\":1}}],[\"自动关闭当前\",{\"1\":{\"49\":1}}],[\"自动注入\",{\"1\":{\"49\":1}}],[\"正常情况应该是给设备下发一个\",{\"1\":{\"56\":1}}],[\"正常结束\",{\"1\":{\"49\":1,\"50\":1}}],[\"正常\",{\"1\":{\"49\":1}}],[\"仅仅用于\",{\"1\":{\"49\":1}}],[\"秒\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"超时\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"超时时回调\",{\"1\":{\"49\":1}}],[\"取消订阅\",{\"1\":{\"49\":2,\"50\":2,\"51\":2}}],[\"销毁时回调\",{\"1\":{\"49\":1}}],[\"异常\",{\"1\":{\"49\":1}}],[\"异常结束\",{\"1\":{\"49\":1,\"50\":2}}],[\"异常时结束当前订阅\",{\"1\":{\"49\":1}}],[\"异常信号\",{\"1\":{\"33\":2}}],[\"异常信息最好有完整的堆栈记录\",{\"1\":{\"1\":1}}],[\"发报文\",{\"0\":{\"56\":1}}],[\"发生其他异常时回调\",{\"1\":{\"49\":1}}],[\"发生\",{\"1\":{\"49\":1}}],[\"发送\",{\"1\":{\"33\":2}}],[\"转发给\",{\"1\":{\"66\":1}}],[\"转为\",{\"1\":{\"49\":1}}],[\"转换的目的是为了满足订阅者的播放需求\",{\"1\":{\"28\":1}}],[\"转换之后的\",{\"1\":{\"28\":1}}],[\"号\",{\"1\":{\"49\":1}}],[\"号逻辑通道\",{\"1\":{\"49\":1}}],[\"号为\",{\"1\":{\"49\":1}}],[\"号的转换器了\",{\"1\":{\"35\":1}}],[\"订阅自动关闭\",{\"1\":{\"49\":1}}],[\"订阅\",{\"1\":{\"49\":1}}],[\"订阅者应该处理这个异常\",{\"1\":{\"33\":2}}],[\"订阅者和\",{\"1\":{\"29\":1}}],[\"订阅者看你实际需求\",{\"1\":{\"29\":1}}],[\"订阅者只是一个泛称\",{\"1\":{\"28\":1}}],[\"订阅者播放流媒体数据\",{\"1\":{\"28\":1}}],[\"订阅者\",{\"1\":{\"27\":1,\"29\":2}}],[\"伪代码\",{\"0\":{\"49\":1}}],[\"注册你自己的订阅者\",{\"0\":{\"48\":1}}],[\"使用任意一款支持\",{\"1\":{\"54\":1}}],[\"使用\",{\"1\":{\"45\":1,\"46\":1}}],[\"xqq\",{\"1\":{\"71\":1}}],[\"x\",{\"0\":{\"45\":1,\"46\":1},\"1\":{\"45\":1,\"46\":1}}],[\"xxx\",{\"1\":{\"6\":1,\"12\":1,\"15\":1}}],[\"添加依赖\",{\"0\":{\"44\":1}}],[\"快速初始化一个\",{\"1\":{\"43\":1}}],[\"快速开始\",{\"0\":{\"42\":1}}],[\"工程\",{\"1\":{\"43\":2}}],[\"创建一个空的\",{\"1\":{\"43\":1}}],[\"创建工程\",{\"0\":{\"43\":1}}],[\"下面是一个基于\",{\"1\":{\"71\":1}}],[\"下载地址\",{\"1\":{\"71\":1}}],[\"下找到对应代码\",{\"1\":{\"42\":1,\"56\":1}}],[\"下发指令\",{\"1\":{\"29\":1}}],[\"本示例仅仅支持\",{\"1\":{\"71\":1}}],[\"本小节的示例可以在\",{\"1\":{\"42\":1,\"56\":1}}],[\"本人\",{\"1\":{\"1\":1}}],[\"传送门\",{\"1\":{\"42\":1,\"43\":1,\"56\":1}}],[\"建议先阅读\",{\"1\":{\"42\":1}}],[\"入门\",{\"0\":{\"41\":1}}],[\"缓存过期时间\",{\"1\":{\"40\":1}}],[\"时回调\",{\"1\":{\"69\":1}}],[\"时有效\",{\"1\":{\"40\":1}}],[\"时候有效\",{\"1\":{\"22\":1}}],[\"如何你使用的是内置的基于\",{\"1\":{\"40\":1}}],[\"如果是分包请求\",{\"1\":{\"66\":1}}],[\"如果内置的实现不符合要求\",{\"1\":{\"62\":1}}],[\"如果你要用\",{\"1\":{\"54\":1,\"55\":1}}],[\"如果你还不熟悉整个通信流程\",{\"1\":{\"42\":1}}],[\"如果你的项目不需要\",{\"1\":{\"20\":1}}],[\"如果能通过当前请求组装出一个完整的包\",{\"1\":{\"39\":1}}],[\"如果默认实现不满足你的要求\",{\"1\":{\"35\":1}}],[\"如果\",{\"1\":{\"33\":2}}],[\"意味着下游可能会收到尚未合并的子包\",{\"1\":{\"39\":1}}],[\"空实现\",{\"1\":{\"39\":1}}],[\"合并之后的新请求\",{\"1\":{\"39\":1}}],[\"合二为一\",{\"1\":{\"29\":1}}],[\"否则\",{\"1\":{\"66\":1}}],[\"否则就返回\",{\"1\":{\"39\":1}}],[\"否则发送\",{\"1\":{\"33\":2}}],[\"尝试合并子包\",{\"1\":{\"39\":1}}],[\"子包合并器\",{\"1\":{\"39\":1}}],[\"到\",{\"1\":{\"39\":1}}],[\"暂存\",{\"1\":{\"39\":1}}],[\"暂且称之为\",{\"1\":{\"29\":2}}],[\"收到终端上报的分包请求时\",{\"1\":{\"39\":1}}],[\"直接委托给了\",{\"1\":{\"36\":1}}],[\"由\",{\"1\":{\"36\":1}}],[\"方法手动注册监听器\",{\"1\":{\"69\":1}}],[\"方法的返回值决定\",{\"1\":{\"36\":1}}],[\"方法的顺序\",{\"1\":{\"36\":1}}],[\"方法最终返回的都是\",{\"1\":{\"33\":1}}],[\"调用support\",{\"1\":{\"36\":1}}],[\"多个\",{\"1\":{\"36\":1}}],[\"返回\",{\"1\":{\"36\":1}}],[\"去处理\",{\"1\":{\"36\":1}}],[\"然后上传到\",{\"1\":{\"56\":1}}],[\"然后设备会上传码流数据到\",{\"1\":{\"56\":1}}],[\"然后交由\",{\"1\":{\"36\":1}}],[\"然后向订阅者发送\",{\"1\":{\"28\":1}}],[\"码流上报到服务端之后\",{\"1\":{\"36\":1}}],[\"码流的关键组件\",{\"1\":{\"33\":1}}],[\"替换掉内置的就行\",{\"1\":{\"35\":1}}],[\"位\",{\"1\":{\"35\":1}}],[\"<video\",{\"1\":{\"71\":1}}],[\"<br\",{\"1\":{\"71\":3}}],[\"<body>\",{\"1\":{\"71\":1}}],[\"<el\",{\"1\":{\"71\":22}}],[\"<div>\",{\"1\":{\"71\":1}}],[\"<div\",{\"1\":{\"71\":2}}],[\"<link\",{\"1\":{\"71\":1}}],[\"<li>\",{\"1\":{\"39\":2}}],[\"<meta\",{\"1\":{\"71\":1}}],[\"<title>1078<\",{\"1\":{\"71\":1}}],[\"<head>\",{\"1\":{\"71\":1}}],[\"<html\",{\"1\":{\"71\":1}}],[\"<\",{\"1\":{\"39\":3,\"71\":24}}],[\"<ol>\",{\"1\":{\"39\":1}}],[\"<=\",{\"1\":{\"35\":1}}],[\"<style\",{\"1\":{\"71\":1}}],[\"<script\",{\"1\":{\"71\":5}}],[\"<span>播放器\",{\"1\":{\"71\":1}}],[\"<span\",{\"1\":{\"39\":1}}],[\"<s\",{\"1\":{\"33\":4}}],[\"个字符\",{\"1\":{\"35\":1}}],[\"这就需要一个\",{\"1\":{\"35\":1}}],[\"这里只是一个泛称\",{\"1\":{\"27\":1}}],[\"版\",{\"1\":{\"35\":1}}],[\"版的终端手机号就是\",{\"1\":{\"35\":1}}],[\"版本的终端手机号是\",{\"1\":{\"31\":2}}],[\"或者可以直接调用\",{\"1\":{\"69\":1}}],[\"或者\",{\"1\":{\"62\":1}}],[\"或\",{\"1\":{\"35\":1,\"54\":1,\"55\":1,\"69\":1}}],[\"为例\",{\"1\":{\"50\":1,\"51\":1}}],[\"为\",{\"1\":{\"35\":1}}],[\"为空\",{\"1\":{\"33\":2}}],[\"+=\",{\"1\":{\"71\":1}}],[\"+\",{\"1\":{\"34\":2,\"71\":12}}],[\"key=\",{\"1\":{\"71\":3}}],[\"key\",{\"1\":{\"34\":1,\"58\":2}}],[\"信号以表示当前订阅终止\",{\"1\":{\"33\":4}}],[\"url\",{\"1\":{\"71\":6}}],[\"uritemplate\",{\"1\":{\"51\":5}}],[\"u\",{\"1\":{\"71\":2}}],[\"ui\",{\"1\":{\"71\":2}}],[\"unload\",{\"1\":{\"71\":1}}],[\"undefined\",{\"1\":{\"71\":1}}],[\"unpkg\",{\"1\":{\"71\":3}}],[\"unsubscribewithsimandchannelnumber\",{\"1\":{\"33\":3}}],[\"unsubscribewithsim\",{\"1\":{\"33\":3}}],[\"unsubscribe\",{\"1\":{\"33\":3}}],[\"utf\",{\"1\":{\"71\":1}}],[\"util\",{\"1\":{\"6\":1}}],[\"updatelastcommunicatetime\",{\"1\":{\"34\":1}}],[\"object\",{\"1\":{\"58\":1,\"66\":2}}],[\"object>\",{\"1\":{\"58\":1}}],[\"octet\",{\"1\":{\"49\":1,\"50\":2}}],[\"outbound\",{\"1\":{\"49\":2,\"50\":2,\"51\":1}}],[\"ofseconds\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"of\",{\"1\":{\"39\":1}}],[\"ol>\",{\"1\":{\"39\":1}}],[\"options\",{\"1\":{\"71\":6}}],[\"option>\",{\"1\":{\"71\":2}}],[\"option\",{\"1\":{\"71\":4}}],[\"optional<jt1078request>\",{\"1\":{\"39\":1}}],[\"optional<jt1078session>\",{\"1\":{\"34\":7}}],[\"optional\",{\"1\":{\"39\":2}}],[\"optionalsession\",{\"1\":{\"34\":3}}],[\"ops\",{\"1\":{\"39\":2}}],[\"order\",{\"1\":{\"36\":1}}],[\"orderedcomponent\",{\"1\":{\"36\":1,\"66\":1,\"69\":1}}],[\"original\",{\"1\":{\"35\":6}}],[\"override\",{\"1\":{\"35\":1,\"36\":1,\"51\":3}}],[\"overview\",{\"0\":{\"3\":1}}],[\"onsessionremove\",{\"1\":{\"69\":1}}],[\"onsessionadd\",{\"1\":{\"69\":1}}],[\"onsessionclose\",{\"1\":{\"33\":2,\"69\":1}}],[\"onerrorcomplete\",{\"1\":{\"49\":2,\"50\":2,\"51\":2}}],[\"on\",{\"1\":{\"33\":8}}],[\"当有数据到来时打印日志\",{\"1\":{\"49\":1}}],[\"当前终端对应的\",{\"1\":{\"66\":1}}],[\"当前留结束时\",{\"1\":{\"49\":1}}],[\"当前\",{\"1\":{\"49\":1}}],[\"当前订阅使用h264\",{\"1\":{\"49\":1}}],[\"当前请求\",{\"1\":{\"39\":1}}],[\"当\",{\"1\":{\"36\":1}}],[\"当客户端断开时会给下游发送\",{\"1\":{\"33\":2}}],[\"当且仅当\",{\"1\":{\"22\":1,\"40\":1}}],[\"表示的是当前订阅返回的码流数据\",{\"1\":{\"33\":1}}],[\"表示交由\",{\"1\":{\"18\":1,\"19\":1}}],[\"泛型参数<s>\",{\"1\":{\"33\":1}}],[\"会在\",{\"1\":{\"66\":1,\"69\":1}}],[\"会先将分包消息\",{\"1\":{\"39\":1}}],[\"会封装成\",{\"1\":{\"36\":1}}],[\"会源源不断地输出码流数据\",{\"1\":{\"33\":1}}],[\"会尽最大可能在非工作时间及时处理\",{\"1\":{\"1\":1}}],[\"来订阅码流\",{\"1\":{\"33\":1}}],[\"逻辑通道号\",{\"1\":{\"33\":1,\"49\":1,\"71\":1}}],[\"逻辑视图介绍了\",{\"1\":{\"29\":1}}],[\"逻辑视图\",{\"1\":{\"29\":1}}],[\"是订阅\",{\"1\":{\"33\":1}}],[\"是独立的\",{\"1\":{\"29\":1}}],[\"章节\",{\"1\":{\"31\":1}}],[\"章节目录\",{\"0\":{\"24\":1}}],[\"640\",{\"1\":{\"71\":1}}],[\"6\",{\"1\":{\"31\":1,\"35\":3,\"71\":1}}],[\"61078\",{\"1\":{\"16\":1,\"17\":1,\"47\":1,\"56\":1}}],[\"button>\",{\"1\":{\"71\":3}}],[\"button\",{\"1\":{\"71\":3}}],[\"builtin\",{\"1\":{\"36\":1}}],[\"builtinjt1078sessioncloselistener\",{\"1\":{\"33\":2}}],[\"build\",{\"1\":{\"33\":1,\"34\":1,\"58\":2}}],[\"builder\",{\"1\":{\"33\":1,\"34\":1}}],[\"beforehandle\",{\"1\":{\"66\":1}}],[\"beforedispatch\",{\"1\":{\"66\":1}}],[\"beforedecode\",{\"1\":{\"66\":1}}],[\"bean\",{\"1\":{\"35\":1,\"51\":1,\"62\":1,\"64\":1,\"68\":1,\"69\":3,\"70\":1}}],[\"binarymessage\",{\"1\":{\"51\":1}}],[\"by\",{\"1\":{\"49\":2,\"50\":2}}],[\"bytecdntp\",{\"1\":{\"71\":1}}],[\"bytebuf\",{\"1\":{\"58\":10,\"62\":2,\"66\":2}}],[\"bytes2hexstring\",{\"1\":{\"51\":1}}],[\"byte\",{\"1\":{\"49\":2,\"50\":2,\"51\":1,\"58\":2}}],[\"bottom\",{\"1\":{\"71\":1}}],[\"border\",{\"1\":{\"71\":1}}],[\"box\",{\"1\":{\"71\":3}}],[\"body>\",{\"1\":{\"71\":1}}],[\"body\",{\"1\":{\"58\":11}}],[\"bounded\",{\"1\":{\"50\":2,\"51\":2}}],[\"boot2\",{\"1\":{\"45\":1}}],[\"boot\",{\"0\":{\"45\":1,\"46\":1},\"1\":{\"43\":2,\"45\":2,\"46\":2,\"53\":1}}],[\"boot3\",{\"1\":{\"42\":2,\"56\":2}}],[\"boolean\",{\"1\":{\"34\":1,\"36\":1,\"58\":2,\"66\":3}}],[\"bossthreadcount\",{\"1\":{\"18\":1}}],[\"bossgroup=new\",{\"1\":{\"18\":1}}],[\"boss\",{\"0\":{\"18\":1},\"1\":{\"16\":1}}],[\"bcd\",{\"1\":{\"31\":2,\"35\":4}}],[\"一个终端请求的处理\",{\"1\":{\"66\":1}}],[\"一个版本\",{\"1\":{\"31\":1}}],[\"一般流程大致像下面伪代码所示\",{\"1\":{\"49\":1}}],[\"一般都是音视频播放器\",{\"1\":{\"29\":1}}],[\"一般都是多实例部署的\",{\"1\":{\"29\":1}}],[\"一般常见的终端视频格式都是\",{\"1\":{\"28\":1}}],[\"就可以替换内置实现\",{\"1\":{\"62\":1}}],[\"就返回组装之后的完整的包\",{\"1\":{\"39\":1}}],[\"就是用来做这个的\",{\"1\":{\"35\":1}}],[\"就是将订阅者和\",{\"1\":{\"29\":1}}],[\"就\",{\"1\":{\"31\":1}}],[\"协议<\",{\"1\":{\"71\":1}}],[\"协议的\",{\"1\":{\"55\":1}}],[\"协议的视频播放播放视频即可\",{\"1\":{\"54\":1}}],[\"协议来播放\",{\"1\":{\"54\":1,\"55\":1}}],[\"协议里\",{\"1\":{\"35\":1}}],[\"协议有\",{\"1\":{\"31\":1}}],[\"协议目前\",{\"1\":{\"31\":1}}],[\"协议扫盲\",{\"0\":{\"30\":1},\"1\":{\"42\":1}}],[\"不符合要求\",{\"1\":{\"62\":1}}],[\"不同版本\",{\"1\":{\"31\":1}}],[\"不推荐\",{\"1\":{\"29\":1}}],[\"不会回复\",{\"1\":{\"1\":1}}],[\"可选\",{\"1\":{\"49\":5}}],[\"可能每个角色都部署在同一个服务中\",{\"1\":{\"29\":1}}],[\"可以使用\",{\"1\":{\"43\":1}}],[\"可以有多个\",{\"1\":{\"36\":1,\"69\":2}}],[\"可以管理和当前服务端连接的客户端会话信息\",{\"1\":{\"34\":1}}],[\"可以简单理解为一个异步的无限的流式的数据源\",{\"1\":{\"33\":1}}],[\"可以根据自己的是实际需求做合理的调整\",{\"1\":{\"29\":1}}],[\"可以直接播放\",{\"1\":{\"28\":1}}],[\"可以是音视频播放器\",{\"1\":{\"27\":1,\"28\":1}}],[\"看实际情况自行优化\",{\"1\":{\"29\":1}}],[\"而具体的实现即物理视图不一定非要每个角色一个服务\",{\"1\":{\"29\":1}}],[\"之间的关系\",{\"1\":{\"29\":1}}],[\"之前应该还有个统一的\",{\"1\":{\"29\":1}}],[\"和客户端对应的连接都用一个叫做\",{\"1\":{\"59\":1}}],[\"和\",{\"1\":{\"29\":1,\"31\":2,\"33\":1,\"42\":1,\"49\":1,\"56\":1}}],[\"var\",{\"1\":{\"71\":1}}],[\"value=\",{\"1\":{\"71\":2}}],[\"value\",{\"1\":{\"50\":2,\"58\":2,\"71\":18}}],[\"video>\",{\"1\":{\"71\":1}}],[\"videoelement\",{\"1\":{\"71\":2}}],[\"videourl\",{\"1\":{\"71\":3}}],[\"videoprotocoltype\",{\"1\":{\"71\":4}}],[\"via\",{\"1\":{\"51\":1}}],[\"v\",{\"1\":{\"71\":10}}],[\"vue\",{\"1\":{\"71\":4}}],[\"v2019的终端手机号是\",{\"1\":{\"35\":1}}],[\"v2013\",{\"1\":{\"35\":1}}],[\"v2011\",{\"1\":{\"35\":1}}],[\"void\",{\"1\":{\"33\":6,\"34\":2,\"36\":1,\"49\":1,\"50\":1,\"51\":3,\"58\":1,\"64\":2,\"69\":3}}],[\"vs\",{\"1\":{\"29\":1}}],[\"vlc\",{\"1\":{\"27\":1,\"54\":1}}],[\"物理视图\",{\"1\":{\"29\":1}}],[\"但是此处还是以\",{\"1\":{\"50\":1,\"51\":1}}],[\"但是在\",{\"1\":{\"35\":1}}],[\"但是\",{\"1\":{\"31\":1}}],[\"但是播放器一般都不能直接播放\",{\"1\":{\"28\":1}}],[\"但在实现上来说是可以耦合在一起的\",{\"1\":{\"29\":1}}],[\"在这个\",{\"1\":{\"56\":1}}],[\"在你订阅某个终端的某个通道之后\",{\"1\":{\"53\":1}}],[\"在逻辑上来说\",{\"1\":{\"29\":1}}],[\"在实际的实现中\",{\"1\":{\"29\":1}}],[\"权限管理\",{\"1\":{\"29\":1}}],[\"还应该有一些其他的功能\",{\"1\":{\"29\":1}}],[\"还需确认你想调阅的设备到底在哪个\",{\"1\":{\"29\":1}}],[\"除了做负载均衡\",{\"1\":{\"29\":1}}],[\"控制台服务\",{\"1\":{\"29\":1}}],[\"实例\",{\"1\":{\"49\":1}}],[\"实例来注册你自己的码流订阅者\",{\"1\":{\"48\":1}}],[\"实例之间的测试顺序\",{\"1\":{\"36\":1}}],[\"实例选择的功能外\",{\"1\":{\"29\":1}}],[\"实例上\",{\"1\":{\"29\":1}}],[\"实现的\",{\"1\":{\"29\":1}}],[\"实现方式\",{\"0\":{\"29\":1}}],[\"所以在\",{\"1\":{\"29\":1}}],[\"所以下发指令之前\",{\"1\":{\"29\":1}}],[\"所以要做进一步的转码\",{\"1\":{\"28\":1}}],[\"上面的通信流程只是一种理论上的流程\",{\"1\":{\"29\":1}}],[\"上班时间\",{\"1\":{\"1\":1}}],[\"也不太推荐\",{\"1\":{\"50\":1,\"51\":1}}],[\"也有可能是子包\",{\"1\":{\"39\":1}}],[\"也可能挑选出某些角色合而为一\",{\"1\":{\"29\":1}}],[\"也可能每个角色都部署在各自不同的服务中\",{\"1\":{\"29\":1}}],[\"也可以推流给其他流媒体服务\",{\"1\":{\"28\":1}}],[\"也可以通过\",{\"1\":{\"28\":1}}],[\"也可以将收到的码流数据保存到本地\",{\"1\":{\"28\":1}}],[\"也需要做相应的解码以适应播放器的播放需求\",{\"1\":{\"28\":1}}],[\"5\",{\"1\":{\"28\":1,\"71\":1}}],[\"设备上传的通常都是压缩之后的音频数据\",{\"1\":{\"28\":1}}],[\"attachmediaelement\",{\"1\":{\"71\":1}}],[\"attribute\",{\"1\":{\"58\":1}}],[\"attributes\",{\"1\":{\"58\":2}}],[\"attributekey\",{\"1\":{\"34\":1}}],[\"attributekey<jt1078session>\",{\"1\":{\"34\":1}}],[\"attr\",{\"1\":{\"34\":1}}],[\"a\",{\"1\":{\"71\":2}}],[\"axios\",{\"1\":{\"71\":2}}],[\"autoplay\",{\"1\":{\"71\":1}}],[\"autosize\",{\"1\":{\"71\":1}}],[\"autorelease\",{\"1\":{\"58\":2}}],[\"audiotypes\",{\"1\":{\"71\":2}}],[\"appendix\",{\"0\":{\"73\":1}}],[\"app\",{\"1\":{\"71\":2}}],[\"application\",{\"1\":{\"47\":1,\"49\":1,\"50\":2}}],[\"apply\",{\"1\":{\"35\":1}}],[\"activetab=code\",{\"1\":{\"71\":1}}],[\"afterconnectionclosed\",{\"1\":{\"51\":1}}],[\"afterconnectionestablished\",{\"1\":{\"51\":1}}],[\"abstractwebsockethandler\",{\"1\":{\"51\":1}}],[\"addhandler\",{\"1\":{\"51\":1}}],[\"add\",{\"1\":{\"51\":1}}],[\"addlistener\",{\"1\":{\"34\":1,\"69\":1}}],[\"adpcm\",{\"1\":{\"28\":1,\"71\":3}}],[\"allow\",{\"1\":{\"71\":1}}],[\"allideltime\",{\"1\":{\"20\":1}}],[\"all\",{\"1\":{\"16\":1}}],[\"7\",{\"1\":{\"71\":1}}],[\"726\",{\"1\":{\"28\":1}}],[\"711\",{\"1\":{\"28\":1}}],[\"相关配置\",{\"0\":{\"40\":1},\"1\":{\"64\":1}}],[\"相关的配置\",{\"1\":{\"12\":1,\"15\":1,\"21\":1}}],[\"相比于视频\",{\"1\":{\"28\":1}}],[\"><\",{\"1\":{\"71\":5}}],[\">播放\",{\"1\":{\"71\":1}}],[\">http<\",{\"1\":{\"71\":1}}],[\">websocket<\",{\"1\":{\"71\":1}}],[\">不要<\",{\"1\":{\"39\":1}}],[\">\",{\"1\":{\"28\":1,\"34\":1,\"39\":1,\"49\":6,\"50\":6,\"51\":5,\"71\":27}}],[\"流媒体数据\",{\"1\":{\"28\":1}}],[\"流媒体服务收到码流数据\",{\"1\":{\"28\":1}}],[\"流媒体服务的\",{\"1\":{\"28\":1}}],[\"流媒体服务\",{\"1\":{\"27\":1,\"29\":1}}],[\"做一些必要的转换\",{\"1\":{\"28\":1}}],[\"480\",{\"1\":{\"71\":1}}],[\"4\",{\"1\":{\"28\":1,\"71\":1}}],[\"4096\",{\"1\":{\"13\":1,\"14\":1}}],[\"推送音视频码流\",{\"1\":{\"28\":1}}],[\"推荐播放器\",{\"1\":{\"55\":1}}],[\"推荐视频播放器\",{\"1\":{\"54\":1}}],[\"推荐使用\",{\"1\":{\"50\":1,\"51\":1}}],[\"推荐\",{\"1\":{\"1\":1}}],[\"开始向流媒体服务\",{\"1\":{\"28\":1}}],[\"37\",{\"1\":{\"71\":1}}],[\"36\",{\"1\":{\"71\":1}}],[\"33\",{\"1\":{\"71\":1}}],[\"3px\",{\"1\":{\"71\":1}}],[\"30\",{\"1\":{\"49\":1}}],[\"30s\",{\"1\":{\"22\":1,\"40\":1,\"49\":1}}],[\"3\",{\"0\":{\"46\":1},\"1\":{\"28\":1,\"46\":1,\"49\":2,\"71\":1}}],[\"通道9\",{\"1\":{\"71\":1}}],[\"通道8\",{\"1\":{\"71\":1}}],[\"通道7\",{\"1\":{\"71\":1}}],[\"通道6\",{\"1\":{\"71\":1}}],[\"通道5\",{\"1\":{\"71\":1}}],[\"通道4\",{\"1\":{\"71\":1}}],[\"通道37\",{\"1\":{\"71\":1}}],[\"通道36\",{\"1\":{\"71\":1}}],[\"通道33\",{\"1\":{\"71\":1}}],[\"通道3\",{\"1\":{\"71\":1}}],[\"通道2\",{\"1\":{\"71\":1}}],[\"通道13\",{\"1\":{\"71\":1}}],[\"通道12\",{\"1\":{\"71\":1}}],[\"通道11\",{\"1\":{\"71\":1}}],[\"通道10\",{\"1\":{\"71\":1}}],[\"通道1\",{\"1\":{\"71\":1}}],[\"通道号\",{\"1\":{\"28\":1}}],[\"通过\",{\"1\":{\"34\":1,\"48\":1}}],[\"通过指定\",{\"1\":{\"33\":1}}],[\"通信流程\",{\"0\":{\"25\":1,\"28\":1},\"1\":{\"42\":1}}],[\"26\",{\"1\":{\"71\":1}}],[\"26cfee\",{\"1\":{\"71\":1}}],[\"264转换为flv\",{\"1\":{\"49\":1}}],[\"264\",{\"1\":{\"28\":3,\"49\":1}}],[\"25\",{\"1\":{\"31\":1}}],[\"2019\",{\"1\":{\"31\":2,\"35\":1}}],[\"2013||2011\",{\"1\":{\"35\":1}}],[\"2013\",{\"1\":{\"31\":2}}],[\"2016\",{\"1\":{\"31\":1}}],[\"2023\",{\"1\":{\"31\":1}}],[\"20m\",{\"1\":{\"16\":1}}],[\"2\",{\"0\":{\"45\":1},\"1\":{\"28\":1,\"45\":1,\"71\":4}}],[\"等方式发送给其他进程\",{\"1\":{\"28\":1}}],[\"等信息\",{\"1\":{\"28\":1}}],[\"等\",{\"1\":{\"27\":1,\"28\":1}}],[\"javascript\",{\"1\":{\"71\":1}}],[\"js\",{\"0\":{\"71\":1},\"1\":{\"27\":2,\"54\":3,\"55\":3,\"71\":8}}],[\"jtcommonutils\",{\"1\":{\"58\":1}}],[\"jt808msgdecoder\",{\"0\":{\"62\":1}}],[\"jt808\",{\"1\":{\"5\":2,\"16\":1,\"22\":1}}],[\"jt\",{\"1\":{\"4\":3,\"26\":1,\"27\":2,\"29\":2,\"33\":2,\"39\":4,\"42\":2,\"45\":1,\"46\":1,\"47\":2,\"56\":2,\"66\":3}}],[\"jt1078msgdecoder\",{\"1\":{\"62\":3}}],[\"jt1078payloadtype\",{\"1\":{\"58\":1}}],[\"jt1078publisherinternal\",{\"1\":{\"36\":1}}],[\"jt1078publisher\",{\"0\":{\"33\":1},\"1\":{\"33\":3,\"48\":1,\"49\":3,\"50\":2,\"51\":9}}],[\"jt1078requestlifecyclelistener\",{\"1\":{\"66\":3}}],[\"jt1078requestheader\",{\"1\":{\"58\":2}}],[\"jt1078requesthandler\",{\"1\":{\"4\":1,\"36\":4,\"47\":1,\"66\":2}}],[\"jt1078requestbuilder\",{\"1\":{\"58\":8}}],[\"jt1078requestsubpackagecombiner\",{\"1\":{\"39\":3,\"66\":1,\"70\":1}}],[\"jt1078request\",{\"0\":{\"58\":1},\"1\":{\"33\":2,\"34\":2,\"36\":3,\"39\":3,\"58\":7,\"62\":3,\"66\":5}}],[\"jt1078serverporthttp\",{\"1\":{\"71\":4}}],[\"jt1078serverip\",{\"1\":{\"71\":3}}],[\"jt1078servernettyconfigure\",{\"1\":{\"64\":2}}],[\"jt1078sessionclosed\",{\"1\":{\"49\":1,\"50\":1}}],[\"jt1078sessionclosereason\",{\"1\":{\"33\":2,\"34\":3,\"69\":1}}],[\"jt1078sessioneventlistener\",{\"0\":{\"69\":1},\"1\":{\"34\":1,\"69\":5}}],[\"jt1078sessionmanager\",{\"0\":{\"34\":1,\"68\":1},\"1\":{\"34\":4,\"50\":2,\"68\":2,\"69\":2}}],[\"jt1078session\",{\"0\":{\"59\":1},\"1\":{\"33\":2,\"34\":3,\"59\":4,\"69\":5}}],[\"jt1078sessiondestroyexception\",{\"1\":{\"33\":2,\"49\":3,\"50\":2,\"51\":2}}],[\"jt1078subscribercloseexception\",{\"1\":{\"33\":3}}],[\"jt1078subscribercreator\",{\"1\":{\"33\":3}}],[\"jt1078subscriber\",{\"1\":{\"33\":2}}],[\"jt1078subscriber<s>\",{\"1\":{\"33\":2}}],[\"jt1078subscription>\",{\"1\":{\"33\":4}}],[\"jt1078terminalidconverter\",{\"0\":{\"35\":1},\"1\":{\"33\":1,\"34\":1,\"35\":4}}],[\"jt1078channelcollector<s>>\",{\"1\":{\"33\":4}}],[\"jt1078channelcollector\",{\"1\":{\"33\":1,\"49\":2,\"50\":1,\"51\":1}}],[\"jt1078dispatcherchannelhandler\",{\"1\":{\"4\":1,\"47\":1,\"66\":2}}],[\"jt1078\",{\"1\":{\"4\":4,\"6\":1,\"7\":1,\"12\":1,\"13\":1,\"15\":1,\"20\":1,\"22\":1,\"33\":2,\"34\":1,\"36\":1,\"39\":4,\"40\":2,\"47\":3,\"50\":1,\"51\":1,\"54\":1,\"55\":1,\"66\":3,\"71\":1}}],[\"常用的就是\",{\"1\":{\"27\":1}}],[\"文件\",{\"1\":{\"27\":1,\"28\":1,\"49\":3}}],[\"其他进程\",{\"1\":{\"27\":1,\"28\":1}}],[\"其他推流服务\",{\"1\":{\"27\":1,\"28\":1}}],[\"终端设备收到\",{\"1\":{\"28\":1}}],[\"终端设备\",{\"1\":{\"27\":1}}],[\"服务端忽略音频数据\",{\"1\":{\"71\":1}}],[\"服务端\",{\"1\":{\"53\":1}}],[\"服务\",{\"1\":{\"27\":2,\"29\":1}}],[\"服务器的tcp端口\",{\"1\":{\"17\":1}}],[\"指令是通过\",{\"1\":{\"29\":1}}],[\"指令之后\",{\"1\":{\"28\":1}}],[\"指令中包含了\",{\"1\":{\"28\":1}}],[\"指令\",{\"1\":{\"28\":1}}],[\"指令服务向终端设备发送\",{\"1\":{\"28\":1}}],[\"指令服务\",{\"1\":{\"27\":1}}],[\"指的是车载终端\",{\"1\":{\"27\":1}}],[\"指的是\",{\"1\":{\"27\":2}}],[\"指南\",{\"0\":{\"23\":1}}],[\"用户请求调阅某个终端的某个通道的流媒体数据\",{\"1\":{\"28\":1}}],[\"用户\",{\"1\":{\"27\":1}}],[\"主要角色\",{\"0\":{\"27\":1}}],[\"参考资料\",{\"0\":{\"26\":1}}],[\"参见\",{\"1\":{\"6\":1,\"31\":1}}],[\"最少配置\",{\"1\":{\"42\":1}}],[\"最大缓存条目\",{\"1\":{\"40\":1}}],[\"最大缓存时间\",{\"1\":{\"22\":1}}],[\"最多缓存多少条消息\",{\"1\":{\"22\":1}}],[\"==\",{\"1\":{\"71\":3}}],[\"===\",{\"1\":{\"71\":1}}],[\"==>\",{\"1\":{\"35\":2}}],[\"=\",{\"1\":{\"22\":1,\"34\":4,\"39\":1,\"40\":1,\"49\":6,\"50\":8,\"51\":12,\"58\":2,\"71\":7}}],[\"=new\",{\"1\":{\"19\":1}}],[\"cdn\",{\"1\":{\"71\":2}}],[\"css\",{\"1\":{\"71\":2}}],[\"chalk\",{\"1\":{\"71\":1}}],[\"charset=\",{\"1\":{\"71\":1}}],[\"channeltypes\",{\"1\":{\"71\":2}}],[\"channelhandlercontext\",{\"1\":{\"66\":2}}],[\"channelread\",{\"1\":{\"66\":2}}],[\"channel\",{\"1\":{\"34\":6,\"49\":2,\"50\":1,\"51\":1,\"59\":5,\"66\":6}}],[\"channelnumber\",{\"1\":{\"33\":8,\"34\":10,\"54\":2,\"55\":2,\"58\":2,\"59\":1,\"71\":3}}],[\"ch\",{\"1\":{\"64\":1}}],[\"cut\",{\"1\":{\"58\":1}}],[\"currenttimemillis\",{\"1\":{\"34\":1}}],[\"createplayer\",{\"1\":{\"71\":1}}],[\"create\",{\"1\":{\"71\":1}}],[\"createdat\",{\"1\":{\"59\":1}}],[\"created\",{\"1\":{\"51\":1,\"71\":1}}],[\"createforblockingsession\",{\"1\":{\"51\":1}}],[\"creator\",{\"1\":{\"33\":3}}],[\"card>\",{\"1\":{\"71\":1}}],[\"card\",{\"1\":{\"71\":2}}],[\"catch\",{\"1\":{\"49\":1,\"50\":1,\"51\":2}}],[\"caffeinejt1078requestsubpackagecombiner\",{\"1\":{\"39\":3}}],[\"caffeine\",{\"1\":{\"22\":3,\"39\":1,\"40\":4}}],[\"click=\",{\"1\":{\"71\":1}}],[\"clearable>\",{\"1\":{\"71\":1}}],[\"clearable\",{\"1\":{\"71\":1}}],[\"clearfix\",{\"1\":{\"71\":1}}],[\"closestatus\",{\"1\":{\"51\":3}}],[\"close\",{\"1\":{\"51\":2}}],[\"closed\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"closereason\",{\"1\":{\"34\":2,\"69\":1}}],[\"class=\",{\"1\":{\"71\":2}}],[\"class\",{\"1\":{\"33\":2,\"34\":1,\"35\":1,\"49\":6,\"50\":6,\"51\":7,\"69\":1}}],[\"class<\",{\"1\":{\"33\":4}}],[\"cls\",{\"1\":{\"33\":7}}],[\"copy\",{\"1\":{\"58\":2}}],[\"collector将码流数据中的h\",{\"1\":{\"49\":1}}],[\"collector\",{\"1\":{\"49\":2,\"50\":1,\"51\":1}}],[\"collections\",{\"1\":{\"33\":1}}],[\"color=\",{\"1\":{\"39\":1}}],[\"com\",{\"1\":{\"71\":6}}],[\"computed\",{\"1\":{\"71\":1}}],[\"component\",{\"1\":{\"36\":1,\"49\":1}}],[\"completewitherror\",{\"1\":{\"49\":2,\"50\":2}}],[\"complete\",{\"1\":{\"33\":4,\"49\":2,\"50\":2}}],[\"combiner\",{\"1\":{\"4\":1,\"22\":2,\"40\":2}}],[\"core\",{\"1\":{\"33\":4}}],[\"code\",{\"1\":{\"33\":2,\"39\":1}}],[\"codec\",{\"1\":{\"14\":1,\"39\":2}}],[\"count\",{\"0\":{\"9\":1,\"18\":1,\"19\":1},\"1\":{\"7\":1,\"16\":2,\"34\":1}}],[\"const\",{\"1\":{\"71\":2}}],[\"constructurl\",{\"1\":{\"71\":3}}],[\"consoleservice\",{\"1\":{\"29\":5}}],[\"controls\",{\"1\":{\"71\":1}}],[\"controls=\",{\"1\":{\"71\":1}}],[\"controller\",{\"1\":{\"50\":1}}],[\"convert\",{\"1\":{\"33\":2,\"35\":3}}],[\"concurrenthashmap<>\",{\"1\":{\"51\":1}}],[\"concurrent\",{\"1\":{\"6\":1}}],[\"configuresocketchannel\",{\"1\":{\"64\":1}}],[\"configureserverbootstrap\",{\"1\":{\"64\":1}}],[\"configuration\",{\"1\":{\"51\":1,\"69\":1}}],[\"config\",{\"1\":{\"5\":2}}],[\"即可\",{\"1\":{\"20\":1,\"64\":1,\"68\":1,\"69\":1}}],[\"font\",{\"1\":{\"71\":1}}],[\"for=\",{\"1\":{\"71\":3}}],[\"form>\",{\"1\":{\"71\":1}}],[\"formconfig\",{\"1\":{\"71\":3}}],[\"form\",{\"1\":{\"71\":15}}],[\"formatutils\",{\"1\":{\"49\":2,\"50\":2}}],[\"filterable\",{\"1\":{\"71\":2}}],[\"final\",{\"1\":{\"34\":2,\"49\":6,\"50\":7,\"51\":10,\"58\":1}}],[\"findbysimandchannel\",{\"1\":{\"34\":4}}],[\"findbysessionid\",{\"1\":{\"34\":1}}],[\"function\",{\"1\":{\"71\":5}}],[\"function<string\",{\"1\":{\"35\":1}}],[\"functionalinterface\",{\"1\":{\"35\":1}}],[\"flux\",{\"1\":{\"33\":2}}],[\"flux<s>\",{\"1\":{\"33\":3}}],[\"flvstreamsubscriberdemowebsocket\",{\"1\":{\"51\":4}}],[\"flvstreamsubscriberdemohttp\",{\"1\":{\"50\":2}}],[\"flv\",{\"0\":{\"72\":1},\"1\":{\"27\":1,\"28\":1,\"49\":4,\"50\":2,\"51\":3,\"54\":4,\"55\":4,\"71\":2}}],[\"flv播放器\",{\"1\":{\"27\":1}}],[\"false\",{\"1\":{\"20\":1,\"34\":2,\"71\":3}}],[\"frame\",{\"0\":{\"14\":1},\"1\":{\"13\":1}}],[\"配置\",{\"0\":{\"47\":1}}],[\"配置为\",{\"1\":{\"20\":1}}],[\"配置项总览\",{\"0\":{\"4\":1,\"7\":1,\"13\":1,\"16\":1}}],[\"将请求\",{\"1\":{\"66\":1}}],[\"将上一步初步解码的\",{\"1\":{\"66\":1}}],[\"将上面的\",{\"1\":{\"51\":1}}],[\"将其中的\",{\"1\":{\"54\":1,\"55\":1}}],[\"将\",{\"1\":{\"20\":1,\"66\":1}}],[\"三个属性\",{\"1\":{\"20\":1}}],[\"该组件用来管理每个终端的\",{\"1\":{\"68\":1}}],[\"该配置项对应\",{\"1\":{\"20\":1}}],[\"该章节介绍的是\",{\"1\":{\"6\":1,\"12\":1,\"15\":1,\"21\":1}}],[\"处理器注册到\",{\"1\":{\"51\":1}}],[\"处理\",{\"1\":{\"18\":1,\"19\":1,\"66\":1}}],[\"watch\",{\"1\":{\"71\":1}}],[\"window\",{\"1\":{\"71\":1}}],[\"width=\",{\"1\":{\"71\":1}}],[\"width\",{\"1\":{\"71\":3}}],[\"with\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"www\",{\"1\":{\"71\":1}}],[\"ws\",{\"1\":{\"55\":1,\"71\":3}}],[\"websocket客户端订阅\",{\"0\":{\"55\":1}}],[\"websockethandler\",{\"1\":{\"51\":1}}],[\"websockethandlerregistry\",{\"1\":{\"51\":1}}],[\"websocketsubscriberdemoflv\",{\"1\":{\"51\":2}}],[\"websocketsession\",{\"1\":{\"51\":4}}],[\"websocketsession>\",{\"1\":{\"51\":1}}],[\"websocketutils\",{\"1\":{\"51\":1}}],[\"websocket订阅示例\",{\"0\":{\"51\":1}}],[\"websocket\",{\"1\":{\"49\":3,\"50\":1,\"51\":5,\"55\":3,\"71\":1}}],[\"websocketconfigurer\",{\"1\":{\"51\":1}}],[\"websocketconfig\",{\"1\":{\"49\":1,\"51\":2}}],[\"web\",{\"0\":{\"72\":1},\"1\":{\"49\":1,\"50\":1}}],[\"webmvc\",{\"1\":{\"42\":1,\"56\":1}}],[\"webflux\",{\"1\":{\"42\":1,\"56\":1}}],[\"workthreadcount\",{\"1\":{\"19\":1}}],[\"workergroup\",{\"1\":{\"19\":1}}],[\"worker\",{\"0\":{\"19\":1},\"1\":{\"16\":1}}],[\"writeridletime\",{\"1\":{\"20\":1}}],[\"writer\",{\"1\":{\"16\":1}}],[\"el\",{\"1\":{\"71\":19}}],[\"element\",{\"1\":{\"71\":4}}],[\"elastic\",{\"1\":{\"50\":2,\"51\":2}}],[\"enablestashbuffer\",{\"1\":{\"71\":1}}],[\"enableworker\",{\"1\":{\"71\":1}}],[\"enablewebsocket\",{\"1\":{\"51\":1}}],[\"enabled\",{\"1\":{\"16\":1,\"20\":1}}],[\"e\",{\"1\":{\"49\":9,\"50\":8,\"51\":9}}],[\"empty\",{\"1\":{\"39\":1}}],[\"emptymap\",{\"1\":{\"33\":1}}],[\"error\",{\"1\":{\"33\":4,\"49\":4,\"50\":3,\"51\":3}}],[\"expire\",{\"1\":{\"71\":1}}],[\"exception\",{\"1\":{\"51\":2}}],[\"extends\",{\"1\":{\"33\":8,\"35\":1,\"36\":1,\"51\":1,\"66\":1,\"69\":1}}],[\"executor\",{\"0\":{\"8\":1},\"1\":{\"6\":1,\"7\":1}}],[\"015900110001\",{\"1\":{\"71\":1}}],[\"0l\",{\"1\":{\"50\":1}}],[\"0x9101\",{\"1\":{\"28\":3,\"29\":1,\"53\":1,\"56\":2}}],[\"0\",{\"1\":{\"16\":4,\"18\":2,\"19\":2,\"54\":2,\"55\":2,\"56\":2,\"71\":5}}],[\"属性\",{\"1\":{\"14\":1}}],[\"hasvideo\",{\"1\":{\"71\":1}}],[\"hasaudio\",{\"1\":{\"71\":1}}],[\"handle\",{\"1\":{\"36\":1,\"39\":2,\"50\":1,\"66\":2}}],[\"handler\",{\"0\":{\"20\":1},\"1\":{\"14\":1,\"16\":1,\"20\":2}}],[\"href=\",{\"1\":{\"71\":1}}],[\"height=\",{\"1\":{\"71\":1}}],[\"head>\",{\"1\":{\"71\":1}}],[\"header\",{\"1\":{\"58\":11,\"71\":1}}],[\"hexstringutils\",{\"1\":{\"51\":1}}],[\"html>\",{\"1\":{\"71\":2}}],[\"html示例参见\",{\"1\":{\"54\":1,\"55\":1}}],[\"http`\",{\"1\":{\"71\":1}}],[\"http客户端订阅\",{\"0\":{\"54\":1}}],[\"httpdemo\",{\"1\":{\"50\":1,\"51\":1}}],[\"http订阅示例\",{\"0\":{\"50\":1}}],[\"http\",{\"1\":{\"49\":5,\"50\":4,\"54\":3,\"71\":3}}],[\"httpservletresponse\",{\"1\":{\"50\":1}}],[\"httpstream\",{\"1\":{\"49\":1,\"50\":1}}],[\"https\",{\"1\":{\"33\":1,\"71\":6}}],[\"h264\",{\"1\":{\"49\":2,\"50\":1,\"51\":1}}],[\"h\",{\"1\":{\"28\":3,\"49\":1}}],[\"hylexus\",{\"1\":{\"4\":3,\"33\":2,\"39\":4,\"47\":2,\"66\":3}}],[\"线程池的线程名前缀\",{\"1\":{\"11\":1}}],[\"textarea\",{\"1\":{\"71\":1}}],[\"text\",{\"1\":{\"71\":3}}],[\"terminalidconverter\",{\"1\":{\"33\":3,\"34\":1}}],[\"terminalid\",{\"1\":{\"31\":1,\"59\":1}}],[\"title>\",{\"1\":{\"71\":1}}],[\"timeout=10000\",{\"1\":{\"54\":1,\"55\":1,\"71\":1}}],[\"timeoutexception\",{\"1\":{\"49\":3,\"50\":2,\"51\":2}}],[\"timeout\",{\"1\":{\"20\":1,\"33\":5,\"49\":3,\"50\":3}}],[\"time\",{\"1\":{\"16\":3,\"59\":1}}],[\"tcp\",{\"1\":{\"68\":1}}],[\"tos\",{\"1\":{\"71\":1}}],[\"tohexstring\",{\"1\":{\"49\":2,\"50\":2}}],[\"to\",{\"1\":{\"49\":3,\"50\":1,\"51\":1}}],[\"try\",{\"1\":{\"49\":1,\"50\":1,\"51\":2}}],[\"trycombine\",{\"1\":{\"39\":1}}],[\"true\",{\"1\":{\"16\":1,\"36\":1,\"58\":2,\"66\":3,\"71\":4}}],[\"t\",{\"1\":{\"27\":2,\"29\":1}}],[\"ttl\",{\"1\":{\"22\":1,\"40\":1}}],[\"type=\",{\"1\":{\"71\":5}}],[\"type\",{\"1\":{\"22\":2,\"40\":2,\"71\":1}}],[\"theme\",{\"1\":{\"71\":1}}],[\"throw\",{\"1\":{\"51\":2}}],[\"throws\",{\"1\":{\"51\":2}}],[\"throwable\",{\"1\":{\"49\":1,\"50\":1,\"51\":2}}],[\"thread\",{\"0\":{\"9\":1,\"18\":1,\"19\":1},\"1\":{\"7\":1,\"16\":2}}],[\"this\",{\"1\":{\"18\":1,\"19\":1,\"33\":6,\"34\":4,\"35\":1,\"49\":3,\"50\":5,\"51\":10,\"58\":10,\"59\":1,\"71\":24}}],[\"tasks\",{\"0\":{\"10\":1},\"1\":{\"7\":1}}],[\"13\",{\"1\":{\"71\":1}}],[\"139xxxxxx\",{\"1\":{\"49\":2}}],[\"16px\",{\"1\":{\"71\":1}}],[\"140px\",{\"1\":{\"71\":1}}],[\"127\",{\"1\":{\"54\":1,\"55\":1,\"56\":1,\"71\":1}}],[\"12\",{\"1\":{\"35\":5,\"71\":1}}],[\"128\",{\"1\":{\"7\":2,\"9\":1,\"10\":1,\"50\":1,\"51\":1,\"71\":1}}],[\"11\",{\"1\":{\"31\":1,\"71\":1}}],[\"1\",{\"1\":{\"28\":1,\"54\":1,\"55\":1,\"56\":1,\"71\":3}}],[\"10px\",{\"1\":{\"71\":1}}],[\"10\",{\"1\":{\"31\":1,\"35\":1,\"71\":1}}],[\"1024\",{\"1\":{\"22\":1,\"40\":1}}],[\"1078服务端口\",{\"1\":{\"71\":1}}],[\"1078服务ip\",{\"1\":{\"71\":1}}],[\"1078消息\",{\"1\":{\"53\":1}}],[\"1078协议\",{\"1\":{\"42\":1,\"45\":1,\"46\":1}}],[\"1078音视频传输协议开发指南\",{\"1\":{\"26\":1}}],[\"1078\",{\"1\":{\"7\":1,\"11\":1,\"27\":1,\"31\":2,\"33\":1,\"35\":1,\"42\":2,\"45\":1,\"46\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":2,\"71\":1}}],[\"1072477383\",{\"1\":{\"1\":1}}],[\"number\",{\"1\":{\"71\":1}}],[\"nullable\",{\"1\":{\"33\":3,\"58\":1,\"69\":3}}],[\"null\",{\"1\":{\"33\":3,\"39\":1,\"51\":2,\"58\":2,\"71\":1}}],[\"npmjs\",{\"1\":{\"71\":1}}],[\"nonnull\",{\"1\":{\"51\":2}}],[\"no\",{\"1\":{\"39\":2}}],[\"newbuilder\",{\"1\":{\"58\":1}}],[\"newboundedelastic\",{\"1\":{\"50\":1,\"51\":1}}],[\"new\",{\"1\":{\"50\":1,\"51\":7,\"58\":2,\"69\":2,\"71\":1}}],[\"newinstance\",{\"1\":{\"34\":1}}],[\"netty相关\",{\"0\":{\"64\":1}}],[\"netty\",{\"1\":{\"4\":1,\"6\":1,\"14\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"47\":1,\"64\":1,\"66\":2}}],[\"nginx\",{\"1\":{\"27\":1,\"28\":1}}],[\"nioeventloopgroup\",{\"1\":{\"18\":1,\"19\":1}}],[\"name\",{\"0\":{\"11\":1},\"1\":{\"7\":1,\"71\":11}}],[\"g726\",{\"1\":{\"71\":9}}],[\"g711\",{\"1\":{\"71\":5}}],[\"getelementbyid\",{\"1\":{\"71\":1}}],[\"getid\",{\"1\":{\"51\":3}}],[\"gettimeout\",{\"1\":{\"50\":1,\"51\":2}}],[\"getchannel\",{\"1\":{\"49\":1,\"50\":2,\"51\":1}}],[\"getsim\",{\"1\":{\"49\":1,\"50\":2,\"51\":1}}],[\"getmessage\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"getorder\",{\"1\":{\"36\":2}}],[\"getlisteners\",{\"1\":{\"34\":1}}],[\"getlogger\",{\"1\":{\"34\":1}}],[\"generatesession\",{\"1\":{\"34\":1}}],[\"generatesessionid\",{\"1\":{\"34\":2}}],[\"g\",{\"1\":{\"28\":2}}],[\"groupname\",{\"1\":{\"71\":7}}],[\"group>\",{\"1\":{\"71\":2}}],[\"group\",{\"0\":{\"8\":1},\"1\":{\"6\":1,\"7\":1,\"71\":6}}],[\"github\",{\"1\":{\"1\":1,\"4\":3,\"33\":2,\"39\":4,\"47\":2,\"66\":3,\"71\":1}}],[\"提供了\",{\"1\":{\"66\":1}}],[\"提供了网页播放器\",{\"1\":{\"29\":1}}],[\"提供的\",{\"1\":{\"45\":1,\"46\":1}}],[\"提供的一些列\",{\"1\":{\"33\":1}}],[\"提示\",{\"1\":{\"6\":1,\"12\":1,\"15\":1,\"21\":1,\"33\":1,\"50\":1,\"51\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"71\":1}}],[\"提交\",{\"1\":{\"1\":1}}],[\"mono\",{\"1\":{\"71\":14}}],[\"model=\",{\"1\":{\"71\":7}}],[\"m\",{\"1\":{\"71\":1}}],[\"mini\",{\"1\":{\"71\":7}}],[\"my\",{\"1\":{\"71\":2}}],[\"myjt1078sessioneventlistener02\",{\"1\":{\"69\":1}}],[\"myjt1078sessioneventlistener01\",{\"1\":{\"69\":1}}],[\"myjt1078sessionclosereason\",{\"1\":{\"49\":1,\"50\":1}}],[\"myjt1078config\",{\"1\":{\"69\":1}}],[\"mutate\",{\"1\":{\"58\":2}}],[\"margin\",{\"1\":{\"71\":1}}],[\"map<string\",{\"1\":{\"51\":1,\"58\":1}}],[\"maximum\",{\"1\":{\"22\":1,\"40\":1}}],[\"maxframelength\",{\"1\":{\"14\":1}}],[\"max\",{\"0\":{\"10\":1,\"14\":1},\"1\":{\"7\":1,\"13\":1}}],[\"mvc\",{\"1\":{\"50\":1,\"51\":1}}],[\"methods\",{\"1\":{\"58\":1,\"71\":1}}],[\"metadata\",{\"1\":{\"33\":1}}],[\"media\",{\"1\":{\"54\":1}}],[\"mediatype\",{\"1\":{\"49\":1,\"50\":2}}],[\"message\",{\"0\":{\"6\":1}}],[\"mpegts\",{\"0\":{\"71\":1},\"1\":{\"27\":1,\"54\":2,\"55\":2,\"71\":5}}],[\"msgbodylength\",{\"1\":{\"58\":2}}],[\"msg\",{\"0\":{\"8\":1},\"1\":{\"4\":1,\"6\":1,\"7\":2,\"11\":1}}],[\"名称为\",{\"1\":{\"5\":1}}],[\"并将码流中的\",{\"1\":{\"49\":1}}],[\"并将其置于最后\",{\"1\":{\"5\":1}}],[\"并且已经将默认的配置加入到了\",{\"1\":{\"5\":1}}],[\"中新增\",{\"1\":{\"69\":1}}],[\"中\",{\"1\":{\"5\":1}}],[\"中查看\",{\"1\":{\"5\":1}}],[\"的场景下\",{\"1\":{\"56\":1}}],[\"的处理服务已经搭建完毕\",{\"1\":{\"53\":1}}],[\"的消息处理流程中\",{\"1\":{\"51\":1}}],[\"的其他推流服务\",{\"1\":{\"49\":3}}],[\"的终端的\",{\"1\":{\"49\":1}}],[\"的项目引入为\",{\"1\":{\"45\":1,\"46\":1}}],[\"的分包合并逻辑\",{\"1\":{\"40\":1}}],[\"的实例去处理\",{\"1\":{\"36\":1}}],[\"的具体类型取决于你使用的\",{\"1\":{\"33\":1}}],[\"的细节请参考官方文档\",{\"1\":{\"33\":1}}],[\"的对应关系\",{\"1\":{\"31\":1}}],[\"的话\",{\"1\":{\"20\":1}}],[\"的\",{\"1\":{\"5\":1,\"14\":1,\"20\":1,\"31\":2,\"35\":2,\"39\":1,\"42\":1,\"56\":1,\"71\":1}}],[\"yml\",{\"1\":{\"5\":1,\"47\":1}}],[\"默认\",{\"1\":{\"71\":1}}],[\"默认实现是基于\",{\"1\":{\"39\":1}}],[\"默认实现是\",{\"1\":{\"36\":1}}],[\"默认实现是只保留最后\",{\"1\":{\"35\":1}}],[\"默认会找到第一个\",{\"1\":{\"36\":1}}],[\"默认值\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"14\":1,\"17\":1,\"18\":2,\"19\":2}}],[\"默认的配置可以在default\",{\"1\":{\"5\":1}}],[\"默认配置\",{\"0\":{\"5\":1}}],[\"dist\",{\"1\":{\"71\":1}}],[\"disabled\",{\"1\":{\"71\":1}}],[\"dispatch\",{\"1\":{\"66\":1}}],[\"dispatcher\",{\"1\":{\"4\":2,\"39\":2,\"47\":1,\"66\":1}}],[\"div>\",{\"1\":{\"71\":3}}],[\"document\",{\"1\":{\"71\":1}}],[\"doctype\",{\"1\":{\"71\":1}}],[\"dofinally\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"doonnext\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"doonerror\",{\"1\":{\"49\":3,\"50\":3,\"51\":3}}],[\"dosubscribe\",{\"1\":{\"33\":7}}],[\"datatypevalue\",{\"1\":{\"58\":2}}],[\"data\",{\"1\":{\"51\":3,\"71\":1}}],[\"datastream\",{\"1\":{\"33\":2}}],[\"dashboard\",{\"1\":{\"29\":1}}],[\"duration\",{\"1\":{\"33\":4,\"49\":1,\"50\":1,\"51\":1}}],[\"destroy\",{\"1\":{\"71\":1}}],[\"desc\",{\"1\":{\"71\":10}}],[\"detachmediaelement\",{\"1\":{\"71\":1}}],[\"decode\",{\"1\":{\"62\":1,\"66\":1}}],[\"demovideostreamsubscriberdto\",{\"1\":{\"50\":2,\"51\":1}}],[\"delimiterbasedframedecoder\",{\"1\":{\"14\":1}}],[\"defaultpublisherbasedjt1078requesthandler\",{\"1\":{\"36\":1,\"39\":2}}],[\"defaultjt1078request\",{\"1\":{\"58\":2}}],[\"defaultjt1078requestmsgdispatcher\",{\"1\":{\"4\":1}}],[\"defaultjt1078terminalidconverter\",{\"1\":{\"35\":1}}],[\"defaultjt1078session\",{\"1\":{\"34\":1}}],[\"defaulteventexecutorgroup\",{\"1\":{\"6\":1}}],[\"default\",{\"1\":{\"5\":1,\"33\":6,\"34\":4,\"35\":1,\"36\":1,\"58\":13,\"59\":1,\"66\":3,\"69\":3}}],[\"debug\",{\"1\":{\"4\":3,\"47\":2,\"49\":1}}],[\"ima\",{\"1\":{\"71\":2}}],[\"implements\",{\"1\":{\"35\":1,\"51\":1}}],[\"impl\",{\"1\":{\"4\":1,\"33\":2,\"39\":4}}],[\"item>\",{\"1\":{\"71\":7}}],[\"item\",{\"1\":{\"71\":15}}],[\"islive\",{\"1\":{\"71\":1}}],[\"isautoclosejt1078sessiononclientclosed\",{\"1\":{\"49\":1,\"50\":1}}],[\"issue\",{\"1\":{\"1\":1}}],[\"if\",{\"1\":{\"35\":1,\"49\":1,\"50\":1,\"51\":2,\"58\":1,\"71\":2}}],[\"ifpresent\",{\"1\":{\"34\":1}}],[\"id=\",{\"1\":{\"71\":2}}],[\"id\",{\"1\":{\"33\":7}}],[\"idlestatehandler\",{\"1\":{\"20\":2}}],[\"idle\",{\"0\":{\"20\":1},\"1\":{\"16\":4,\"20\":1}}],[\"ip\",{\"1\":{\"28\":2}}],[\"in\",{\"1\":{\"71\":3}}],[\"input\",{\"1\":{\"71\":4}}],[\"inline>\",{\"1\":{\"71\":1}}],[\"index\",{\"1\":{\"71\":2}}],[\"initializer\",{\"1\":{\"43\":1}}],[\"instructionservice\",{\"1\":{\"29\":5}}],[\"interface\",{\"1\":{\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"39\":1,\"58\":2,\"59\":1,\"62\":1,\"64\":1,\"66\":1,\"69\":1}}],[\"int\",{\"1\":{\"9\":1,\"10\":1,\"17\":1,\"18\":1,\"19\":1,\"36\":1,\"49\":1,\"50\":1,\"58\":1}}],[\"info\",{\"1\":{\"4\":1,\"47\":1,\"49\":4,\"50\":4,\"51\":4}}],[\"ioexception\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"io\",{\"1\":{\"4\":3,\"6\":1,\"14\":1,\"20\":1,\"33\":3,\"39\":4,\"47\":2,\"66\":3}}],[\"radio\",{\"1\":{\"71\":6}}],[\"rawbytebuf\",{\"1\":{\"58\":10}}],[\"runtimeexception\",{\"1\":{\"51\":2}}],[\"rtmp\",{\"1\":{\"49\":3}}],[\"recreateplayer\",{\"1\":{\"71\":2}}],[\"rel=\",{\"1\":{\"71\":1}}],[\"release\",{\"1\":{\"58\":2}}],[\"registry\",{\"1\":{\"51\":2}}],[\"registerwebsockethandlers\",{\"1\":{\"51\":1}}],[\"removed\",{\"1\":{\"51\":3}}],[\"remove\",{\"1\":{\"51\":5}}],[\"removebysimandchannelandthenclose\",{\"1\":{\"34\":1,\"49\":1,\"50\":1}}],[\"removebysimandthenclose\",{\"1\":{\"34\":1}}],[\"removebysessionidandthenclose\",{\"1\":{\"34\":2}}],[\"removebysessionid\",{\"1\":{\"34\":1}}],[\"response\",{\"1\":{\"50\":2}}],[\"responsebodyemitter\",{\"1\":{\"50\":4}}],[\"retain\",{\"1\":{\"39\":1,\"58\":3}}],[\"return\",{\"1\":{\"33\":3,\"34\":4,\"35\":3,\"36\":1,\"39\":2,\"50\":1,\"51\":1,\"58\":13,\"59\":1,\"66\":3,\"69\":2,\"71\":2}}],[\"red\",{\"1\":{\"39\":1}}],[\"reactor\",{\"1\":{\"33\":4}}],[\"reason\",{\"1\":{\"33\":7,\"34\":2}}],[\"readeridletime\",{\"1\":{\"20\":1}}],[\"reader\",{\"1\":{\"16\":1}}],[\"requestmapping\",{\"1\":{\"50\":2}}],[\"request\",{\"0\":{\"22\":1},\"1\":{\"4\":1,\"22\":2,\"34\":6,\"36\":4,\"39\":5,\"40\":2,\"66\":5}}],[\"root\",{\"1\":{\"4\":1,\"47\":1}}],[\"lf3\",{\"1\":{\"71\":1}}],[\"label\",{\"1\":{\"71\":17}}],[\"label=\",{\"1\":{\"71\":12}}],[\"lang=\",{\"1\":{\"71\":1}}],[\"lastcommunicatetimestamp\",{\"1\":{\"34\":1,\"59\":2}}],[\"load\",{\"1\":{\"71\":1}}],[\"location\",{\"1\":{\"71\":1}}],[\"log\",{\"1\":{\"49\":8,\"50\":7,\"51\":7}}],[\"loggerfactory\",{\"1\":{\"34\":1}}],[\"logger\",{\"1\":{\"34\":2}}],[\"logging\",{\"1\":{\"4\":1,\"47\":1}}],[\"long\",{\"1\":{\"34\":1,\"59\":3}}],[\"lib\",{\"1\":{\"71\":2}}],[\"li>\",{\"1\":{\"39\":2}}],[\"list\",{\"1\":{\"34\":1}}],[\"list<jt1078sessioneventlistener>\",{\"1\":{\"34\":1}}],[\"listener2\",{\"1\":{\"69\":1}}],[\"listener1\",{\"1\":{\"69\":1}}],[\"listener\",{\"1\":{\"34\":1,\"69\":1}}],[\"link\",{\"1\":{\"33\":10,\"39\":1,\"66\":1}}],[\"le\",{\"1\":{\"71\":8}}],[\"length\",{\"0\":{\"14\":1},\"1\":{\"13\":1,\"35\":2}}],[\"level\",{\"1\":{\"4\":1,\"47\":1}}],[\"playing\",{\"1\":{\"71\":2}}],[\"play\",{\"1\":{\"71\":3}}],[\"player\",{\"0\":{\"72\":1},\"1\":{\"54\":1,\"71\":9}}],[\"placeholder=\",{\"1\":{\"71\":2}}],[\"pt\",{\"1\":{\"58\":2}}],[\"put\",{\"1\":{\"51\":1,\"58\":1}}],[\"publishon\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"publisher\",{\"1\":{\"33\":4,\"49\":5,\"50\":5,\"51\":6}}],[\"public\",{\"1\":{\"33\":1,\"34\":1,\"35\":3,\"36\":1,\"39\":1,\"49\":2,\"50\":4,\"51\":10,\"58\":1,\"59\":1,\"62\":1,\"64\":1,\"66\":1,\"69\":4}}],[\"primary\",{\"1\":{\"71\":1}}],[\"private\",{\"1\":{\"49\":2,\"50\":3,\"51\":4}}],[\"projectreactor\",{\"1\":{\"33\":1}}],[\"processer\",{\"1\":{\"11\":1}}],[\"processor\",{\"0\":{\"6\":1,\"8\":1},\"1\":{\"4\":1,\"6\":1,\"7\":2}}],[\"propertysources\",{\"1\":{\"5\":1}}],[\"protocol\",{\"0\":{\"12\":1},\"1\":{\"4\":1,\"12\":1,\"13\":1}}],[\"persistence\",{\"1\":{\"34\":1}}],[\"persistenceifnecessary\",{\"1\":{\"34\":1}}],[\"pending\",{\"0\":{\"10\":1},\"1\":{\"7\":1}}],[\"pattern\",{\"1\":{\"51\":3}}],[\"path\",{\"1\":{\"51\":3}}],[\"payloadtype\",{\"1\":{\"58\":2}}],[\"payload就是转换之后的码流数据\",{\"1\":{\"49\":3}}],[\"payload\",{\"1\":{\"49\":7,\"50\":7,\"51\":1}}],[\"params\",{\"1\":{\"49\":4,\"50\":10,\"51\":6}}],[\"param\",{\"1\":{\"33\":6,\"39\":1,\"66\":3}}],[\"package\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"4\":1,\"22\":2,\"40\":2,\"71\":1}}],[\"port\",{\"0\":{\"17\":1},\"1\":{\"16\":1,\"28\":2,\"47\":1,\"71\":1}}],[\"pool\",{\"0\":{\"11\":1},\"1\":{\"7\":1}}],[\"s40\",{\"1\":{\"71\":2}}],[\"s32\",{\"1\":{\"71\":2}}],[\"s24\",{\"1\":{\"71\":2}}],[\"s16\",{\"1\":{\"71\":2}}],[\"script>\",{\"1\":{\"71\":5}}],[\"schedulers\",{\"1\":{\"50\":1,\"51\":1}}],[\"scheduler\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"src=\",{\"1\":{\"71\":4}}],[\"slot=\",{\"1\":{\"71\":1}}],[\"slf4j\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"synchronized\",{\"1\":{\"51\":3}}],[\"system\",{\"1\":{\"34\":1}}],[\"sseemitter\",{\"1\":{\"49\":4,\"50\":8}}],[\"solid\",{\"1\":{\"71\":1}}],[\"sourceaudiohints=\",{\"1\":{\"71\":1}}],[\"sourceaudiohints\",{\"1\":{\"71\":7}}],[\"someclass\",{\"1\":{\"49\":2}}],[\"socketchannel\",{\"1\":{\"64\":1}}],[\"socket\",{\"1\":{\"27\":1,\"28\":2,\"49\":1,\"50\":1}}],[\"sample\",{\"1\":{\"42\":2,\"56\":2}}],[\"samples\",{\"1\":{\"42\":2,\"56\":2}}],[\"short\",{\"1\":{\"33\":6,\"34\":4,\"49\":1,\"58\":2,\"59\":1}}],[\"span>\",{\"1\":{\"71\":1}}],[\"span>返回\",{\"1\":{\"39\":1}}],[\"spec\",{\"1\":{\"33\":2}}],[\"springwebflux\",{\"1\":{\"50\":1,\"51\":1}}],[\"springmvc\",{\"1\":{\"50\":2,\"51\":3}}],[\"spring\",{\"0\":{\"45\":1,\"46\":1},\"1\":{\"5\":1,\"43\":3,\"45\":2,\"46\":2,\"53\":1,\"70\":1}}],[\"select>\",{\"1\":{\"71\":2}}],[\"select\",{\"1\":{\"71\":2}}],[\"setallowedorigins\",{\"1\":{\"51\":1}}],[\"setcontenttype\",{\"1\":{\"50\":1}}],[\"sendmessage\",{\"1\":{\"51\":1}}],[\"send\",{\"1\":{\"49\":2,\"50\":2}}],[\"session事件监听器\",{\"1\":{\"69\":3}}],[\"session相关\",{\"0\":{\"67\":1}}],[\"sessionmap\",{\"1\":{\"51\":7}}],[\"sessionmanager\",{\"1\":{\"49\":1,\"50\":5}}],[\"session销毁\",{\"1\":{\"49\":1,\"50\":1,\"51\":1}}],[\"sessionid\",{\"1\":{\"34\":7,\"59\":1}}],[\"session\",{\"1\":{\"34\":5,\"49\":2,\"51\":12,\"69\":3}}],[\"see\",{\"1\":{\"33\":4,\"39\":5,\"66\":3}}],[\"serverbootstrap\",{\"1\":{\"64\":2}}],[\"server\",{\"0\":{\"15\":1},\"1\":{\"4\":1,\"5\":2,\"15\":1,\"16\":1,\"20\":1,\"29\":1,\"42\":2,\"45\":1,\"46\":1,\"47\":1,\"56\":2}}],[\"s\",{\"1\":{\"33\":1,\"35\":2}}],[\"silence\",{\"1\":{\"71\":2}}],[\"signal\",{\"1\":{\"49\":1,\"50\":1}}],[\"signaltype\",{\"1\":{\"33\":4,\"49\":2,\"50\":2,\"51\":1}}],[\"sim号\",{\"1\":{\"33\":1}}],[\"sim转换\",{\"1\":{\"31\":1}}],[\"sim\",{\"1\":{\"31\":1,\"33\":15,\"34\":11,\"35\":2,\"49\":4,\"50\":1,\"51\":1,\"54\":2,\"55\":2,\"58\":2,\"59\":2,\"71\":4}}],[\"size=\",{\"1\":{\"71\":7}}],[\"size\",{\"1\":{\"22\":1,\"40\":1,\"71\":1}}],[\"style>\",{\"1\":{\"71\":1}}],[\"style=\",{\"1\":{\"71\":4}}],[\"stylesheet\",{\"1\":{\"71\":1}}],[\"stashinitialsize\",{\"1\":{\"71\":1}}],[\"status\",{\"1\":{\"51\":1}}],[\"static\",{\"1\":{\"50\":1,\"51\":2,\"58\":1}}],[\"state\",{\"0\":{\"20\":1},\"1\":{\"16\":1,\"20\":1}}],[\"starter\",{\"1\":{\"45\":1,\"46\":1}}],[\"stream\",{\"1\":{\"49\":1,\"50\":2}}],[\"stream<jt1078session>\",{\"1\":{\"34\":1}}],[\"string>\",{\"1\":{\"35\":1}}],[\"string\",{\"1\":{\"11\":1,\"33\":10,\"34\":10,\"35\":6,\"49\":1,\"51\":1,\"58\":2,\"59\":3}}],[\"storage\",{\"0\":{\"22\":1}}],[\"support\",{\"1\":{\"4\":3,\"36\":2,\"39\":4,\"47\":2,\"66\":3}}],[\"substring\",{\"1\":{\"35\":1}}],[\"subscription\",{\"1\":{\"33\":2,\"49\":4,\"50\":5,\"51\":3,\"54\":1,\"55\":1,\"71\":1}}],[\"subscribeflvstream\",{\"1\":{\"49\":1,\"50\":2}}],[\"subscribe\",{\"1\":{\"33\":3,\"49\":2,\"50\":2,\"51\":2}}],[\"sub\",{\"0\":{\"21\":1,\"22\":1},\"1\":{\"4\":1,\"22\":2,\"40\":2}}],[\"没钱的捧个人场\",{\"1\":{\"2\":1}}],[\"有可能是原子包\",{\"1\":{\"39\":1}}],[\"有关\",{\"1\":{\"31\":1}}],[\"有钱的捧个钱场\",{\"1\":{\"2\":1}}],[\"有问题群里留言即可\",{\"1\":{\"1\":1}}],[\"请选择\",{\"1\":{\"71\":1}}],[\"请求生命周期监听器\",{\"0\":{\"65\":1}}],[\"请求体\",{\"1\":{\"58\":1}}],[\"请求分包合并\",{\"0\":{\"38\":1}}],[\"请求分包消息暂存器相关配置\",{\"1\":{\"22\":1}}],[\"请求处理流程\",{\"0\":{\"37\":1}}],[\"请求消息处理器\",{\"0\":{\"36\":1}}],[\"请先读我\",{\"0\":{\"31\":1},\"1\":{\"42\":1}}],[\"请作者喝一杯🍺吧\",{\"1\":{\"2\":1}}],[\"请尽可能地描述清楚自己的问题\",{\"1\":{\"1\":1}}],[\"赞助\",{\"0\":{\"2\":1}}],[\"联系我们\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
